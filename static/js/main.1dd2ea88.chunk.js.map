{"version":3,"sources":["components/TrackItem/Grid/const.js","components/TrackItem/Grid/GridOverlay.jsx","components/TrackItem/Grid/GridItem.jsx","components/TrackItem/TrackGrid.jsx","const.js","App.jsx","index.jsx"],"names":["BASE_NOTES","NOTES","DELIMITER","GRID_ROWS","length","NOTATION_VALUES","GridOverlay","playDuration","trackColor","useState","Math","random","progressKey","setProgressKey","progress","setProgress","isActive","resetProgress","useEffect","timer","setInterval","prev","clearInterval","Box","position","height","width","bgcolor","display","flexDirection","alignItems","justifyContent","sx","backdropFilter","zIndex","color","fontWeight","fontSize","marginTop","LinearProgress","variant","value","defaultProps","GridItem","onPlay","activeBox","setActiveBox","activeBoxValues","setActiveBoxValues","key","setKey","firstRender","useRef","rerender","createArray","Array","from","current","baseColor","Stack","padding","direction","spacing","paddingBottom","Button","onClick","map","box","backgroundColor","borderColor","_","rowIndex","floor","borderWidth","borderStyle","borderRadius","transition","s","columnIndex","id","idValue","Fragment","opacity","itemId","includes","filter","boxId","omit","toString","axis","handleSize","onResizeStop","event","split","row","col","parseInt","resizeValue","nextPosition","some","Boolean","handleBoxResize","size","TrackGrid","setPlayDuration","divide","num","divider","createTimeObject","duration","nValue","nRest","halfNValue","halfNRest","quarterNValue","quarterNRest","toSeconds","Tone","play","items","a","times","item","start","noteEntries","Object","entries","groupBy","obj","noteDatas","note","octave","getNote","player","toDestination","forEach","triggerAttackRelease","noteDurations","totalTrackDuration","sort","b","setTimeout","dispose","cancel","Colors","main","secondary","bg","dark","light","yellow","yellow_darker","yellow_c","App","theme","createTheme","palette","primary","className","ThemeProvider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1dd2ea88.chunk.js","sourcesContent":["const BASE_NOTES = ['B', 'A#', 'A', 'G#', 'G', 'F#', 'F', 'E', 'D#', 'D', 'C#', 'C'];\nconst NOTES = ['C', ...BASE_NOTES, ...BASE_NOTES];\nconst DELIMITER = '__';\nconst GRID_ROWS = (2 * BASE_NOTES.length) + 1;\nconst GRID_COLS = 48;\nconst NOTATIONS = ['1n', '2n', '4n', '8n'];\nconst NOTATION_VALUES = {\n  '1n': 8,\n  '2n': 4,\n  '4n': 2,\n  '8n': 1,\n};\n\nexport {\n  NOTES, DELIMITER, GRID_COLS, GRID_ROWS, NOTATIONS, NOTATION_VALUES, BASE_NOTES,\n};\n","import React, { useEffect, useState } from 'react';\nimport { Box, LinearProgress } from '@mui/material';\nimport PropTypes from 'prop-types';\n\n/**\n * Component that overlays the grid item when it's playing\n */\nconst GridOverlay = ({ playDuration, trackColor }) => {\n  const [progressKey, setProgressKey] = useState(Math.random());\n  const [progress, setProgress] = useState(0);\n  const isActive = playDuration !== 0;\n\n  /**\n   * Function to reset the current progress bar\n   */\n  const resetProgress = () => {\n    setProgress(0);\n    setProgressKey(Math.random());\n  };\n\n  /**\n   * Will be called everytime the variable `playDuration` changes.\n   * What it does: Sets an interval to update the \"playing audio\" progress bar.\n   */\n  useEffect(() => {\n    let timer;\n\n    if (playDuration > 0) {\n      timer = setInterval(() => {\n        setProgress((prev) => (prev === 100 ? prev : (prev + 1)));\n      }, playDuration / 100);\n    } else {\n      resetProgress();\n    }\n\n    /**\n     * Cleanup function to clear the interval.\n     */\n    return () => {\n      if (timer) {\n        resetProgress();\n        clearInterval(timer);\n      }\n    };\n  }, [playDuration]);\n\n  return isActive ? (\n    <Box\n      position=\"absolute\"\n      height=\"100%\"\n      width=\"100%\"\n      bgcolor=\"rgba(0, 0, 0, 0.1)\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      sx={{ backdropFilter: 'blur(1px)', zIndex: 99 }}\n    >\n      <Box color=\"#fff\" fontWeight=\"bold\" fontSize=\"32px\">\n        PLAYING AUDIO\n      </Box>\n      <Box width=\"20vw\" color={`primary.${trackColor}`} sx={{ marginTop: 3 }}>\n        <LinearProgress key={progressKey} color=\"inherit\" variant=\"determinate\" value={progress} />\n      </Box>\n    </Box>\n  ) : null;\n};\n\nGridOverlay.propTypes = {\n  trackColor: PropTypes.string,\n  playDuration: PropTypes.number.isRequired,\n};\n\nGridOverlay.defaultProps = {\n  trackColor: 'yellow',\n};\n\nexport default GridOverlay;\n","/* eslint-disable react/no-array-index-key */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Stack, Box, Button } from '@mui/material';\nimport omit from 'lodash.omit';\nimport { ResizableBox } from 'react-resizable';\nimport PropTypes from 'prop-types';\nimport {\n  NOTES, DELIMITER, GRID_COLS, GRID_ROWS, BASE_NOTES,\n} from './const';\n\n/**\n * Grid item where user can clicks on the grid and assign an active note.\n * ![documentation](https://raw.githubusercontent.com/LouisAndrew/loop-maker/docs/docs/images/GridItem.jpeg)\n */\nconst GridItem = ({ trackColor = 'yellow', onPlay }) => {\n  /**\n   * Array of active box positions.\n   * @example [1__2, 2__3]\n   * @type {[String[], | React.SetStateAction]}\n   */\n  const [activeBox, setActiveBox] = useState([]);\n\n  /**\n   * Array of the values (length in number of grids taken) of the active box.\n   * @example { '1__2': 1, '2__3': 2 }\n   * @type {[{[key: string]: number}, React.SetStateAction]}\n   */\n  const [activeBoxValues, setActiveBoxValues] = useState({});\n\n  /**\n   * Key of the whole component (Used to rerender the grids).\n   * @type {[string]}\n   */\n  const [key, setKey] = useState(Math.random());\n\n  /**\n   * Sets whether the component is done being rendered for the first time.\n   */\n  const firstRender = useRef(true);\n\n  /**\n   * Function to rerender the whole component.\n   */\n  const rerender = () => setKey(Math.random());\n\n  /**\n   * Function to toggle active state of a box (e.g. 1__2).\n   * @param {string} itemId\n   */\n  const toggleActive = (itemId) => {\n    if (!activeBox.includes(itemId)) {\n      setActiveBox([...activeBox, itemId]);\n      setActiveBoxValues({\n        ...activeBoxValues,\n        [itemId.toString()]: 1,\n      });\n    } else {\n      setActiveBox((prev) => prev.filter((boxId) => boxId !== itemId));\n      setActiveBoxValues((prev) => omit(prev, [itemId]));\n    }\n  };\n\n  /**\n   * Function to handle resize action of a box. The function will be called **AFTER** the\n   * user stopped resizing the box.\n   * @param {number} width\n   * @param {string} itemId\n   */\n  const handleBoxResize = (width, itemId) => {\n    const [row, col] = itemId.split(DELIMITER);\n\n    // disable resize if the next column is filled\n    if (activeBox.includes(`${row}${DELIMITER}${parseInt(col, 10) + 1}`)) {\n      rerender();\n      return;\n    }\n\n    const quotient = Math.floor(width / 32); // Whole number division\n    const remainder = width % 32; // Rest of the division\n\n    // Resize value: Difference (in grids) of the active box before and after resize event\n    const resizeValue = quotient + (remainder > 0 ? 1 : 0);\n\n    /**\n     * Next position of the box\n     * @example {resizeValue: 3; itemId: 1__2} -> nextPosition = 1__5\n     */\n    const nextPosition = parseInt(col, 10) + resizeValue - 1;\n\n    const requirements = [\n      activeBox.includes(nextPosition),\n      nextPosition >= GRID_COLS,\n    ];\n\n    if (\n      requirements.some(Boolean) // returns true if all of the `requirements` array is truthy\n    ) {\n      rerender();\n      return;\n    }\n\n    setActiveBoxValues((prev) => ({\n      ...prev,\n      [itemId]: resizeValue,\n    }));\n  };\n\n  /**\n   * Play all of the active notes on the grid.\n   */\n  const handlePlay = () => {\n    onPlay(\n      activeBox.map((box) => `${box}${DELIMITER}${activeBoxValues[box] ?? 0}`),\n    );\n  };\n\n  /**\n   * Clear all of the active box and its values.\n   */\n  const handleClear = () => {\n    setActiveBox([]);\n    setActiveBoxValues([]);\n  };\n\n  /**\n   * Helper function to initialize an array of length\n   * @param {number} length\n   */\n  const createArray = (length) => Array.from(Array(length));\n\n  useEffect(() => {\n    if (!firstRender.current) {\n      rerender();\n    } else {\n      firstRender.current = false;\n    }\n  }, [activeBox, activeBoxValues]);\n\n  const baseColor = `primary.${trackColor}`;\n  const BOX_SIZE = 25;\n\n  return (\n    <Stack padding={4}>\n      <Stack direction=\"row\" spacing={1} paddingBottom={2}>\n        <Button\n          onClick={handlePlay}\n          sx={{\n            backgroundColor: baseColor,\n            '&:hover': { backgroundColor: baseColor },\n          }}\n        >\n          Play\n        </Button>\n        <Button\n          onClick={handleClear}\n          variant=\"outlined\"\n          sx={{ color: baseColor, borderColor: baseColor }}\n        >\n          Clear\n        </Button>\n      </Stack>\n      <Stack spacing={0.25} key={key}>\n        {createArray(GRID_ROWS).map((_, rowIndex) => {\n          const SHADES = ['', '_darker'];\n          const color = rowIndex % BASE_NOTES.length === 0\n            ? `${baseColor}_c`\n            : `${baseColor}${SHADES[Math.floor(rowIndex / BASE_NOTES.length)]}`;\n          return (\n            <Stack\n              width=\"fit-content\"\n              spacing={0.25}\n              direction=\"row\"\n              alignItems=\"center\"\n              key={`row-${rowIndex}`}\n              sx={{\n                borderWidth: 1,\n                borderStyle: 'solid',\n                borderColor: 'transparent',\n                borderRadius: 0.5,\n                '&:hover': {\n                  borderColor: color,\n                  transition: '200ms',\n                },\n              }}\n            >\n              <Box\n                height={BOX_SIZE}\n                width={50}\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                fontWeight=\"bold\"\n                color={color}\n              >\n                {NOTES[rowIndex]}\n              </Box>\n              {createArray(GRID_COLS).map((s, columnIndex) => {\n                const id = `${rowIndex}${DELIMITER}${columnIndex}`;\n                const idValue = activeBoxValues[id];\n                return (\n                  <React.Fragment key={`col-${columnIndex}`}>\n                    <Box\n                      width={BOX_SIZE}\n                      height={BOX_SIZE}\n                      borderRadius={0.5}\n                      sx={{\n                        backgroundColor: 'primary.dark',\n                        '&:hover': {\n                          backgroundColor: 'primary.main',\n                          opacity: [0.9, 0.8, 0.7],\n                        },\n                      }}\n                      onClick={() => toggleActive(id)}\n                    >\n                      {activeBox.includes(id) && idValue ? (\n                        <ResizableBox\n                          height={BOX_SIZE}\n                          width={idValue * BOX_SIZE + (idValue - 1) * 2}\n                          axis=\"x\"\n                          handleSize={[10, 10]}\n                          onResizeStop={(event, { size }) => {\n                            handleBoxResize(size.width, id);\n                          }}\n                        >\n                          <Box\n                            bgcolor={color}\n                            height=\"100%\"\n                            width=\"100%\"\n                            borderRadius={0.5}\n                          />\n                        </ResizableBox>\n                      ) : null}\n                    </Box>\n                  </React.Fragment>\n                );\n              })}\n            </Stack>\n          );\n        })}\n      </Stack>\n    </Stack>\n  );\n};\n\nGridItem.propTypes = {\n  trackColor: PropTypes.string,\n  onPlay: PropTypes.func.isRequired,\n};\n\nGridItem.defaultProps = {\n  trackColor: 'yellow',\n};\n\nexport default GridItem;\n","/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport { Box } from '@mui/material';\nimport * as Tone from 'tone';\nimport groupBy from 'lodash.groupby';\n\nimport {\n  BASE_NOTES, DELIMITER, NOTATION_VALUES, NOTES,\n} from './Grid/const';\nimport GridOverlay from './Grid/GridOverlay';\nimport GridItem from './Grid/GridItem';\n\nconst TrackGrid = () => {\n  const [playDuration, setPlayDuration] = useState(0);\n\n  /**\n   * Divide a number to its floored value (whole number division) and its rest.\n   * @param {number} num Number to be divided.\n   * @param {number} divider Divider of the number\n   * @returns {[number, number]} result of the division and the rest of the division\n   */\n  const divide = (num, divider) => [Math.floor(num / divider), num % divider];\n\n  /**\n   * Function to create a Tone.js compliant time object from a duration.\n   * @param {number} duration Duration of the time in grid units.\n   * @returns {Object} Tone.js compliant time object.\n   */\n  const createTimeObject = (duration) => {\n    // note: Assuming that every grid unit -> 8n or 1/8 note\n    const [nValue, nRest] = divide(duration, NOTATION_VALUES['1n']);\n    const [halfNValue, halfNRest] = divide(nRest, NOTATION_VALUES['2n']);\n    const [quarterNValue, quarterNRest] = divide(\n      halfNRest,\n      NOTATION_VALUES['4n'],\n    );\n    const [eighthNValue] = divide(quarterNRest, NOTATION_VALUES['8n']);\n\n    return {\n      '1n': nValue,\n      '2n': halfNValue,\n      '4n': quarterNValue,\n      '8n': eighthNValue,\n    };\n  };\n\n  const toSeconds = (duration) => Tone.Transport.toSeconds(duration);\n  const getTotalNoteDuration = (start, duration) => (toSeconds(start) + toSeconds(duration)) * 1000;\n\n  /**\n   * Function to play a grid item.\n   * @param {string[]} items\n   */\n  const play = async (items) => {\n    const times = items.map((item) => {\n      const [row, col, duration] = item.split(DELIMITER);\n      return {\n        row,\n        duration: createTimeObject(duration),\n        start: createTimeObject(col),\n      };\n    });\n\n    const noteEntries = Object.entries(groupBy(times, (obj) => obj.row)).map(([row, noteDatas]) => {\n      const getNote = () => {\n        const OCTAVES = [5, 4, 3];\n        const note = NOTES[row];\n        const octave = OCTAVES[Math.floor(row / (BASE_NOTES.length - 1))];\n        return `${note}${note === 'C' ? octave + 1 : octave}`;\n      };\n      return ({\n        note: getNote(),\n        noteDatas,\n        player: new Tone.Synth().toDestination(),\n      });\n    });\n\n    noteEntries\n      .forEach(({ noteDatas, player, note }) => {\n        noteDatas.forEach(({ duration, start }) => {\n          /**\n           * Trigger attack release (attack: press on a note, release: release the note) for every\n           * note datas for the duration of `duration` and starting at `start` (in seconds) after the\n           * current time.\n           */\n          player.triggerAttackRelease(\n            note,\n            duration,\n            `+${toSeconds(start)}`,\n          );\n        });\n      });\n\n    if (times.length > 0) {\n      /**\n       * Gets the total duration of a track.\n       * Retrieve the last note of the current track, then sum its start time and its duration.\n       */\n      const noteDurations = [...times].map((item) => getTotalNoteDuration(item.start, item.duration));\n      const totalTrackDuration = noteDurations.sort((a, b) => b - a)[0];\n\n      setPlayDuration(totalTrackDuration);\n\n      await Tone.start();\n      setTimeout(() => {\n        setPlayDuration(0);\n        noteEntries.forEach(({ player }) => {\n          player.dispose();\n        });\n      }, totalTrackDuration + 500);\n      Tone.Transport.cancel(totalTrackDuration / 1000);\n    }\n  };\n\n  return (\n    <Box position=\"relative\">\n      <GridOverlay trackColor=\"yellow\" playDuration={playDuration} />\n      <GridItem trackColor=\"yellow\" onPlay={play} />\n    </Box>\n  );\n};\n\nexport default TrackGrid;\n","export const Colors = {\n  main: '#646464',\n  secondary: '#fff',\n  bg: '#3E3C3C',\n  dark: '#525151',\n  light: '#706c6c',\n  yellow: '#E3EA91',\n  yellow_darker: '#edd640',\n  yellow_c: '#eeff00',\n};\n","import React from 'react';\nimport { createTheme, ThemeProvider, Box } from '@mui/material';\n\nimport TrackGrid from './components/TrackItem/TrackGrid';\nimport { Colors } from './const';\n\nimport './App.css';\n\nfunction App() {\n  const theme = createTheme({\n    palette: {\n      primary: {\n        ...Colors,\n      },\n    },\n  });\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <Box bgcolor=\"primary.bg\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height=\"100vh\">\n          <TrackGrid />\n        </Box>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// eslint-disable-file\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'react-resizable/css/styles.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}