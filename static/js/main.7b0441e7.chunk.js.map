{"version":3,"sources":["const.js","components/Views/Home.jsx","components/TrackItem/Grid/const.js","components/TrackItem/Grid/GridOverlay.jsx","hooks/useTracks.jsx","components/TrackItem/Grid/GridItem.jsx","components/TrackItem/TrackGrid.jsx","components/Views/TrackView.jsx","components/Views/Router.jsx","App.jsx","index.jsx"],"names":["Colors","main","secondary","bg","dark","light","red","yellow","blue","green","white","TRACKS","TRACK_COLORS","Home","map","trackNumber","to","Box","BASE_NOTES","DELIMITER","NOTATION_VALUES","INSTRUMENTS","INSTRUMENT_NOTES","cello","clarinet","flute","harp","piano","saxophone","violin","GridOverlay","playDuration","trackColor","display","onCancel","reset","useState","Math","random","progressKey","setProgressKey","progress","setProgress","isActive","resetProgress","useEffect","timer","setInterval","prev","clearInterval","color","position","bgcolor","flexDirection","alignItems","justifyContent","sx","backdropFilter","zIndex","top","left","right","bottom","fontWeight","fontSize","width","marginTop","LinearProgress","variant","value","Button","onClick","borderColor","defaultProps","activeBoxesDefault","reduce","a","b","activeBoxesValuesDefault","instrumentsDefault","TracksContext","createContext","activeBoxes","activeBoxesValues","instruments","tempo","gridLength","TracksProvider","children","setActiveBoxes","setActiveBoxesValues","setInstruments","setTempo","setGridLength","getSetter","useCallback","indexOf","setActiveBox","setActiveBoxValues","setInstrument","Provider","GridItem","onPlay","trackName","useContext","activeBox","useMemo","activeBoxValues","instrument","withLoop","setWithLoop","key","setKey","instrumentNotes","firstRender","useRef","rerender","filterOldBoxes","box","split","rowIndex","colIndex","length","parseInt","current","newValue","filter","newBoxValue","Object","keys","k","Stack","direction","paddingBottom","spacing","IconButton","Typography","marginLeft","backgroundColor","marginRight","FormGroup","FormControlLabel","control","Checkbox","onChange","e","target","checked","label","InputLabel","id","Slider","size","max","min","_","FormControl","minWidth","Select","labelId","autoWidth","len","MenuItem","defaultValue","instrumentData","note","borderWidth","borderStyle","borderRadius","transition","height","replace","Array","from","s","columnIndex","idValue","Fragment","opacity","itemId","includes","boxId","omit","toString","axis","handleSize","onResizeStop","event","row","col","resizeValue","floor","nextPosition","some","Boolean","handleBoxResize","TrackGrid","player","setPlayer","noteEntries","setNoteEntries","setPlayDuration","displayOverlay","setDisplayOverlay","timeoutId","setTimeoutId","setResetProgress","playWithLoop","setPlayWithLoop","divide","num","divider","createTimeObject","duration","nValue","nRest","halfNValue","halfNRest","quarterNValue","quarterNRest","toSeconds","Tone","stopAudio","dispose","cancel","replayAudio","entries","playAudio","forEach","noteDatas","start","triggerAttackRelease","timeout","setTimeout","play","items","bpm","times","item","groupBy","obj","urls","sampler","baseUrl","onload","noteDurations","totalTrackDuration","sort","toDestination","clearTimeout","TrackView","Router","path","element","App","theme","createTheme","palette","primary","className","ThemeProvider","ReactDOM","render","basename","document","getElementById"],"mappings":"yPAAaA,EAAS,CACpBC,KAAM,UACNC,UAAW,OACXC,GAAI,UACJC,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,OAAQ,UACRC,KAAM,UACNC,MAAO,UACPC,MAAO,QAGIC,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,GAEtBC,EAAe,CAC1B,EAAG,MACH,EAAG,SACH,EAAG,OACH,EAAG,QACH,EAAG,S,iCCCUC,EAhBF,kBACX,gCACE,2CACCF,EAAOG,KAAI,SAACC,GAAD,OACV,cAAC,IAAD,CAAMC,GAAE,gBAAWD,GAAnB,SACE,eAACE,EAAA,EAAD,yBAEG,IACAF,MAJL,gBAAgDA,EAAhD,iB,uECTAG,EAAa,CACjB,IACA,KACA,IACA,KACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,KAGIC,GADK,CAAI,KAAJ,OAAYD,EAAeA,GACpB,MAIZE,EACE,EADFA,EAEE,EAFFA,EAGE,EAHFA,EAIE,EAEFC,EAAc,CAClB,gBACA,QAKA,QACA,kBACA,kBAKA,QACA,YACA,UAGIC,EAAmB,CACvB,gBAAiB,CACf,MACA,KACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,KACA,OAEFC,MAAO,CACL,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,MAKFC,SAAU,CACR,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,MAEFC,MAAO,CACL,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,kBAAmB,CACjB,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,MAEF,kBAAmB,CACjB,KACA,MACA,MACA,KAEA,KACA,MACA,MACA,KAEA,KACA,MACA,MACA,MAUFC,KAAM,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KA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","file":"static/js/main.7b0441e7.chunk.js","sourcesContent":["export const Colors = {\n  main: '#646464',\n  secondary: '#fff',\n  bg: '#3E3C3C',\n  dark: '#525151',\n  light: '#706c6c',\n  red: '#ea9191',\n  yellow: '#E3EA91',\n  blue: '#91b9ea',\n  green: '#91eabb',\n  white: '#ccc',\n};\n\nexport const TRACKS = [1, 2, 3, 4, 5];\n\nexport const TRACK_COLORS = {\n  1: 'red',\n  2: 'yellow',\n  3: 'blue',\n  4: 'green',\n  5: 'white',\n};\n","import { Box } from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\nimport { TRACKS } from '../../const';\n\nconst Home = () => (\n  <div>\n    <h1>Home View</h1>\n    {TRACKS.map((trackNumber) => (\n      <Link to={`track-${trackNumber}`} key={`track-${trackNumber}-link`}>\n        <Box>\n          Go to track\n          {' '}\n          {trackNumber}\n        </Box>\n\n      </Link>\n    ))}\n  </div>\n);\n\nexport default Home;\n","const BASE_NOTES = [\n  'B',\n  'A#',\n  'A',\n  'G#',\n  'G',\n  'F#',\n  'F',\n  'E',\n  'D#',\n  'D',\n  'C#',\n  'C',\n];\nconst NOTES = ['C', ...BASE_NOTES, ...BASE_NOTES];\nconst DELIMITER = '__';\nconst GRID_ROWS = 2 * BASE_NOTES.length + 1;\nconst GRID_COLS = 48;\nconst NOTATIONS = ['1n', '2n', '4n', '8n'];\nconst NOTATION_VALUES = {\n  '1n': 8,\n  '2n': 4,\n  '4n': 2,\n  '8n': 1,\n};\nconst INSTRUMENTS = [\n  'bass-electric',\n  'cello',\n  /**\n   * Disabling as I have no idea how the notes are ordered for clarinet\n   */\n  // 'clarinet',\n  'flute',\n  'guitar-acoustic',\n  'guitar-electric',\n  /**\n   * Same problem as above\n   */\n  // 'harp',\n  'piano',\n  'saxophone',\n  'violin',\n];\n\nconst INSTRUMENT_NOTES = {\n  'bass-electric': [\n    'As5',\n    'G5',\n    'E5',\n    'Cs5',\n    'As4',\n    'G4',\n    'E4',\n    'Cs4',\n    'As3',\n    'G3',\n    'E3',\n    'Cs3',\n    'As2',\n    'G2',\n    'E2',\n    'Cs2',\n  ],\n  cello: [\n    'B4',\n    'As4',\n    'A4',\n    'Gs4',\n    'G4',\n    'Fs4',\n    'F4',\n    'E4',\n    'Ds4',\n    'D4',\n    'Cs4',\n    'C4',\n    'B3',\n    'As3',\n    'A3',\n    'Gs3',\n    'G3',\n    'Fs3',\n    'F3',\n    'E3',\n    'Ds3',\n    'D3',\n    'Cs3',\n    'C3',\n  ],\n  /**\n   * Skipping\n   */\n  clarinet: [\n    'F2',\n    'D3',\n    'F3',\n    'D4',\n    'D5',\n    'F4',\n    'Fs5',\n    'As2',\n    'As3',\n    'As4',\n    'D2',\n  ],\n  flute: [\n    'C6',\n    'A5',\n    'E5',\n    'C5',\n    'A4',\n    'E4',\n    'C4',\n    'A3',\n    'E3',\n    'C3',\n  ],\n  'guitar-acoustic': [\n    'B3',\n    'As3',\n    'A3',\n    'Gs3',\n    'G3',\n    'Fs3',\n    'F3',\n    'E3',\n    'Ds3',\n    'D3',\n    'Cs3',\n    'C3',\n    'B2',\n    'As2',\n    'A2',\n    'Gs2',\n    'G2',\n    'Fs2',\n    'F2',\n    'E2',\n    'Ds2',\n    'D2',\n    'Cs2',\n    'C2',\n  ],\n  'guitar-electric': [\n    'A5',\n    'Fs5',\n    'Ds5',\n    'C5',\n\n    'A4',\n    'Fs4',\n    'Ds4',\n    'C4',\n\n    'A3',\n    'Fs3',\n    'Ds3',\n    'C3',\n\n    // 'Fs2',\n    // 'A2',\n    // 'C6',\n    // 'Cs2',\n  ],\n  /**\n   * Disabling\n   */\n  harp: [\n    'B3',\n    'C5',\n    'D2',\n    'D4',\n    'D6',\n    'D7',\n    'E1',\n    'E3',\n    'E5',\n    'F2',\n    'F4',\n    'F6',\n    'F7',\n    'G1',\n    'G3',\n    'G5',\n    'A2',\n    'A4',\n    'A6',\n    'B1',\n    'B5',\n    'B6',\n    'C3',\n  ],\n  piano: [\n    'C5',\n\n    'B4',\n    'As4',\n    'A4',\n    'Gs4',\n    'G4',\n    'Fs4',\n    'F4',\n    'E4',\n    'Ds4',\n    'D4',\n    'Cs4',\n    'C4',\n\n    'B3',\n    'As3',\n    'A3',\n    'Gs3',\n    'G3',\n    'Fs3',\n    'F3',\n    'E3',\n    'Ds3',\n    'D3',\n    'Cs3',\n    'C3',\n  ],\n  saxophone: [\n    'B3',\n    'As3',\n    'A3',\n    'Gs3',\n    'G3',\n    'Fs3',\n    'F3',\n    'E3',\n    'Ds3',\n    'D3',\n    'Cs3',\n    'C3',\n\n    // 'B2',\n    // 'As2',\n\n    // 'E2',\n    // 'Ds4',\n    // 'E4',\n    // 'F2',\n    // 'F4',\n    // 'Fs2',\n    // 'Fs4',\n    // 'G2',\n    // 'G4',\n    // 'Gs2',\n    // 'Gs4',\n    // 'A4',\n    // 'C4',\n    // 'Cs2',\n    // 'Cs4',\n    // 'D2',\n    // 'D4',\n    // 'Ds2',\n  ],\n  violin: [\n    'C6',\n\n    'A5',\n    'G5',\n    'E5',\n    'C5',\n\n    'A4',\n    'G4',\n    'E4',\n    'C4',\n  ],\n};\n\nexport {\n  NOTES,\n  DELIMITER,\n  GRID_COLS,\n  GRID_ROWS,\n  NOTATIONS,\n  NOTATION_VALUES,\n  BASE_NOTES,\n  INSTRUMENTS,\n  INSTRUMENT_NOTES,\n};\n","import React, { useEffect, useState } from 'react';\nimport { Box, LinearProgress, Button } from '@mui/material';\nimport PropTypes from 'prop-types';\n\n/**\n * Component that overlays the grid item when it's playing\n */\nconst GridOverlay = ({\n  playDuration, trackColor, display, onCancel, reset,\n}) => {\n  const [progressKey, setProgressKey] = useState(Math.random());\n  const [progress, setProgress] = useState(0);\n  const isActive = playDuration !== 0 && display;\n\n  /**\n   * Function to reset the current progress bar\n   */\n  const resetProgress = () => {\n    setProgress(0);\n    setProgressKey(Math.random());\n  };\n\n  /**\n   * Will be called everytime the variable `playDuration` changes.\n   * What it does: Sets an interval to update the \"playing audio\" progress bar.\n   */\n  useEffect(() => {\n    let timer;\n\n    if (reset) {\n      resetProgress();\n    }\n\n    if (playDuration > 0) {\n      timer = setInterval(() => {\n        setProgress((prev) => (prev === 100 ? prev : prev + 1));\n      }, playDuration / 100);\n    } else {\n      resetProgress();\n    }\n\n    /**\n     * Cleanup function to clear the interval.\n     */\n    return () => {\n      if (timer) {\n        resetProgress();\n        clearInterval(timer);\n      }\n    };\n  }, [playDuration, display, reset]);\n\n  const color = `primary.${trackColor}`;\n\n  return isActive ? (\n    <Box\n      position=\"absolute\"\n      bgcolor=\"rgba(0, 0, 0, 0.1)\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      sx={{\n        backdropFilter: 'blur(1px)',\n        zIndex: 99,\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n      }}\n    >\n      <Box color=\"#fff\" fontWeight=\"bold\" fontSize=\"32px\">\n        PLAYING AUDIO\n      </Box>\n      <Box width=\"20vw\" color={color} sx={{ marginTop: 3 }}>\n        <LinearProgress\n          key={progressKey}\n          color=\"inherit\"\n          variant=\"determinate\"\n          value={progress}\n        />\n      </Box>\n      <Button onClick={onCancel} variant=\"outlined\" sx={{ color, borderColor: color, marginTop: 4 }}>\n        Cancel\n      </Button>\n    </Box>\n  ) : null;\n};\n\nGridOverlay.propTypes = {\n  trackColor: PropTypes.string,\n  playDuration: PropTypes.number.isRequired,\n  display: PropTypes.bool.isRequired,\n  onCancel: PropTypes.func,\n  reset: PropTypes.bool.isRequired,\n};\n\nGridOverlay.defaultProps = {\n  trackColor: 'yellow',\n  onCancel: () => {},\n};\n\nexport default GridOverlay;\n","import React, {\n  createContext, useContext, useState, useCallback,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { TRACKS } from '../const';\n\nconst activeBoxesDefault = TRACKS.reduce((a, b) => ({ ...a, [b]: [] }), {});\nconst activeBoxesValuesDefault = TRACKS.reduce((a, b) => ({ ...a, [b]: {} }), {});\nconst instrumentsDefault = TRACKS.reduce((a, b) => ({ ...a, [b]: 'piano' }), {});\n\nconst TracksContext = createContext({\n  activeBoxes: activeBoxesDefault,\n  activeBoxesValues: activeBoxesValuesDefault,\n  instruments: instrumentsDefault,\n  tempo: 120,\n  gridLength: 40,\n});\n\nexport const TracksProvider = ({ children }) => {\n  const [activeBoxes, setActiveBoxes] = useState(activeBoxesDefault);\n  const [activeBoxesValues, setActiveBoxesValues] = useState(activeBoxesValuesDefault);\n  const [instruments, setInstruments] = useState(instrumentsDefault);\n\n  const [tempo, setTempo] = useState(120);\n  const [gridLength, setGridLength] = useState(40);\n\n  const getSetter = useCallback((trackNumber) => {\n    if (TRACKS.indexOf(trackNumber) !== -1) {\n      const setActiveBox = (value) => {\n        setActiveBoxes((prev) => ({\n          ...prev,\n          [trackNumber]: value,\n        }));\n      };\n\n      const setActiveBoxValues = (value) => {\n        setActiveBoxesValues((prev) => ({\n          ...prev,\n          [trackNumber]: value,\n        }));\n      };\n\n      const setInstrument = (value) => {\n        setInstruments((prev) => ({\n          ...prev,\n          [trackNumber]: value,\n        }));\n      };\n\n      return {\n        setActiveBox,\n        setActiveBoxValues,\n        setInstrument,\n        setTempo,\n        setGridLength,\n      };\n    }\n\n    return {\n      setActiveBox: () => {},\n      setActiveBoxValues: () => {},\n      setInstrument: () => {},\n    };\n  }, []);\n\n  return (\n    <TracksContext.Provider value={{\n      getSetter,\n      activeBoxes,\n      activeBoxesValues,\n      instruments,\n      tempo,\n      gridLength,\n    }}\n    >\n      {children}\n    </TracksContext.Provider>\n  );\n};\n\nTracksProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\n/**\n *\n */\nexport const useTracks = () => useContext(TracksContext);\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable react/no-array-index-key */\nimport React, {\n  useEffect, useRef, useState, useMemo,\n} from 'react';\nimport {\n  Stack,\n  Box,\n  Button,\n  FormControl,\n  FormControlLabel,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n  IconButton,\n  Checkbox,\n  Slider,\n  FormGroup,\n} from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport { Link } from 'react-router-dom';\nimport omit from 'lodash.omit';\nimport { ResizableBox } from 'react-resizable';\nimport PropTypes from 'prop-types';\nimport { DELIMITER, INSTRUMENTS, INSTRUMENT_NOTES } from './const';\nimport { useTracks } from '../../../hooks/useTracks';\n\n/**\n * Grid item where user can clicks on the grid and assign an active note.\n * ![documentation](https://raw.githubusercontent.com/LouisAndrew/loop-maker/docs/docs/images/GridItem.jpeg)\n */\nconst GridItem = ({\n  trackColor = 'yellow',\n  onPlay,\n  trackName = 'Track 1',\n  trackNumber,\n}) => {\n  const {\n    getSetter, activeBoxes, activeBoxesValues, instruments, gridLength, tempo,\n  } = useTracks();\n\n  const activeBox = useMemo(() => activeBoxes[trackNumber], [activeBoxes]);\n  const activeBoxValues = useMemo(\n    () => activeBoxesValues[trackNumber],\n    [activeBoxesValues],\n  );\n  const instrument = useMemo(() => instruments[trackNumber], [instruments]);\n\n  const {\n    setActiveBox, setActiveBoxValues, setInstrument, setTempo, setGridLength,\n  } = useMemo(\n    () => getSetter(trackNumber),\n    [trackNumber],\n  );\n\n  const [withLoop, setWithLoop] = useState(false);\n\n  function handleTempo(_, newValue) {\n    setTempo(newValue);\n  }\n\n  /**\n   * Key of the whole component (Used to rerender the grids).\n   * @type {[string]}\n   */\n  const [key, setKey] = useState(Math.random());\n\n  /**\n   * @type {string[]}\n   */\n  const instrumentNotes = useMemo(\n    () => INSTRUMENT_NOTES[instrument],\n    [instrument],\n  );\n\n  /**\n   * Sets whether the component is done being rendered for the first time.\n   */\n  const firstRender = useRef(true);\n\n  /**\n   * Function to rerender the whole component.\n   */\n  const rerender = () => setKey(Math.random());\n\n  /**\n   * Function to toggle active state of a box (e.g. 1__2).\n   * @param {string} itemId\n   */\n  const toggleActive = (itemId) => {\n    if (!activeBox.includes(itemId)) {\n      setActiveBox([...activeBox, itemId]);\n      setActiveBoxValues({\n        ...activeBoxValues,\n        [itemId.toString()]: 1,\n      });\n    } else {\n      setActiveBox(activeBox.filter((boxId) => boxId !== itemId));\n      setActiveBoxValues(omit(activeBoxValues, [itemId]));\n    }\n  };\n\n  /**\n   * Function to handle resize action of a box. The function will be called **AFTER** the\n   * user stopped resizing the box.\n   * @param {number} width\n   * @param {string} itemId\n   */\n  const handleBoxResize = (width, itemId) => {\n    const [row, col] = itemId.split(DELIMITER);\n\n    // disable resize if the next column is filled\n    if (activeBox.includes(`${row}${DELIMITER}${parseInt(col, 10) + 1}`)) {\n      rerender();\n      return;\n    }\n\n    const quotient = Math.floor(width / 32); // Whole number division\n    const remainder = width % 32; // Rest of the division\n\n    // Resize value: Difference (in grids) of the active box before and after resize event\n    const resizeValue = quotient + (remainder > 0 ? 1 : 0);\n\n    /**\n     * Next position of the box\n     * @example {resizeValue: 3; itemId: 1__2} -> nextPosition = 1__5\n     */\n    const nextPosition = parseInt(col, 10) + resizeValue - 1;\n\n    const requirements = [\n      activeBox.includes(nextPosition),\n      nextPosition > gridLength,\n    ];\n\n    if (\n      requirements.some(Boolean) // returns true if all of the `requirements` array is truthy\n    ) {\n      rerender();\n      return;\n    }\n\n    setActiveBoxValues({\n      ...activeBoxValues,\n      [itemId]: resizeValue,\n    });\n  };\n\n  /**\n   * Play all of the active notes on the grid.\n   */\n  const handlePlay = () => {\n    onPlay(\n      activeBox.map((box) => `${box}${DELIMITER}${activeBoxValues[box] ?? 0}`),\n      instrument,\n      tempo,\n      withLoop,\n    );\n  };\n\n  /**\n   * Clear all of the active box and its values.\n   */\n  const handleClear = () => {\n    setActiveBox([]);\n    setActiveBoxValues([]);\n  };\n\n  /**\n   * Helper function to initialize an array of length\n   * @param {number} length\n   */\n  const createArray = (length) => Array.from(Array(length));\n\n  const filterOldBoxes = (box) => {\n    const [rowIndex, colIndex] = box.split(DELIMITER);\n    return (\n      instrumentNotes.length > parseInt(rowIndex, 10) && colIndex < gridLength\n    );\n  };\n\n  useEffect(() => {\n    if (!firstRender.current) {\n      rerender();\n    } else {\n      firstRender.current = false;\n    }\n  }, [activeBox, activeBoxValues]);\n\n  useEffect(() => {\n    if (!firstRender.current) {\n      const newValue = activeBox.filter(filterOldBoxes);\n\n      const newBoxValue = Object.keys(activeBoxValues).filter(filterOldBoxes);\n\n      setActiveBox(newValue);\n      setActiveBoxValues(\n        newBoxValue\n          .map((k) => ({ [k]: activeBoxValues[k] }))\n          .reduce((a, b) => ({ ...a, ...b }), {}),\n      );\n    }\n  }, [instrumentNotes, gridLength]);\n\n  const color = `primary.${trackColor}`;\n  const BOX_SIZE = 24;\n\n  return (\n    <Stack>\n      <Stack\n        direction=\"row\"\n        alignItems=\"flex-end\"\n        paddingBottom={2}\n        spacing={5}\n      >\n        <Stack\n          direction=\"row\"\n          alignItems=\"center\"\n          justifyContent=\"flex-start\"\n          spacing={3}\n        >\n          <Link to=\"/\">\n            <IconButton aria-label=\"back\" sx={{ color }}>\n              <ArrowBackIcon />\n            </IconButton>\n          </Link>\n          <Typography\n            color={color}\n            variant=\"h5\"\n            fontWeight=\"bold\"\n            sx={{ marginLeft: '14px' }}\n          >\n            {trackName}\n          </Typography>\n          <Button\n            onClick={handlePlay}\n            sx={{\n              backgroundColor: color,\n              marginLeft: '28px',\n              marginRight: '14px',\n              '&:hover': { backgroundColor: color },\n            }}\n          >\n            Play\n          </Button>\n          <Button\n            onClick={handleClear}\n            variant=\"outlined\"\n            sx={{ color, borderColor: color }}\n          >\n            Clear\n          </Button>\n          <FormGroup>\n            <FormControlLabel\n              control={(\n                <Checkbox\n                  onChange={(e) => {\n                    setWithLoop(e.target.checked);\n                  }}\n                  sx={{\n                    color,\n                    '&.Mui-checked': {\n                      color,\n                    },\n                  }}\n                />\n            )}\n              sx={{ color }}\n              label=\"Loop\"\n            />\n          </FormGroup>\n        </Stack>\n        <Stack direction=\"row\" alignItems=\"flex-end\" spacing={1}>\n          <Box sx={{ width: 120 }}>\n            <InputLabel id=\"tempo\" sx={{ color }}>\n              Tempo:\n              {' '}\n              {tempo}\n            </InputLabel>\n            <Slider\n              size=\"small\"\n              value={tempo}\n              id=\"tempo\"\n              max={180}\n              min={80}\n              onChange={handleTempo}\n            />\n          </Box>\n          <Box sx={{ width: 80 }}>\n            <FormControl size=\"small\" sx={{ minWidth: 80 }}>\n              <InputLabel id=\"grid-size\" sx={{ color }}>\n                Grid length:\n                {gridLength}\n              </InputLabel>\n              <Select\n                labelId=\"grid-size\"\n                id=\"grid-size-input\"\n                value={gridLength}\n                label=\"Grid length\"\n                autoWidth\n                variant=\"filled\"\n                onChange={(e) => setGridLength(parseInt(e.target.value, 10))}\n                sx={{ color }}\n              >\n                {[32, 36, 40, 44, 48, 52].map((len) => (\n                  <MenuItem key={len} value={len}>\n                    {len}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Box>\n\n          <Box sx={{ width: 64 }}>\n            <FormControl size=\"small\" sx={{ minWidth: 80 }}>\n              <InputLabel id=\"instrument\" sx={{ color }}>\n                Instrument\n              </InputLabel>\n              <Select\n                labelId=\"instrument\"\n                id=\"instrument-input\"\n                value={instrument}\n                defaultValue=\"piano\"\n                label=\"Instrument\"\n                autoWidth\n                variant=\"filled\"\n                onChange={(e) => setInstrument(e.target.value)}\n                sx={{ color }}\n              >\n                {INSTRUMENTS.map((instrumentData) => (\n                  <MenuItem value={instrumentData} key={instrumentData}>\n                    {instrumentData}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Box>\n        </Stack>\n      </Stack>\n      <Stack spacing={0.25} key={key}>\n        {instrumentNotes.map((note, rowIndex) => (\n          <Stack\n            width=\"fit-content\"\n            spacing={0.25}\n            direction=\"row\"\n            alignItems=\"center\"\n            key={`row-${rowIndex}`}\n            sx={{\n              borderWidth: 1,\n              borderStyle: 'solid',\n              borderColor: 'transparent',\n              borderRadius: 0.5,\n              '&:hover': {\n                borderColor: color,\n                transition: '200ms',\n              },\n            }}\n          >\n            <Box\n              height={BOX_SIZE}\n              width={50}\n              display=\"flex\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              fontWeight=\"bold\"\n              color={color}\n            >\n              {note.replace('s', '#')}\n            </Box>\n            {createArray(gridLength).map((s, columnIndex) => {\n              const id = `${rowIndex}${DELIMITER}${columnIndex}`;\n              const idValue = activeBoxValues[id];\n              return (\n                <React.Fragment key={`col-${columnIndex}`}>\n                  <Box\n                    width={BOX_SIZE}\n                    height={BOX_SIZE}\n                    borderRadius={0.5}\n                    sx={{\n                      backgroundColor: 'primary.dark',\n                      '&:hover': {\n                        backgroundColor: 'primary.main',\n                        opacity: [0.9, 0.8, 0.7],\n                      },\n                    }}\n                    onClick={() => toggleActive(id)}\n                  >\n                    {activeBox.includes(id) && idValue ? (\n                      <ResizableBox\n                        height={BOX_SIZE}\n                        width={idValue * BOX_SIZE + (idValue - 1) * 2}\n                        axis=\"x\"\n                        handleSize={[10, 10]}\n                        onResizeStop={(event, { size }) => {\n                          handleBoxResize(size.width, id);\n                        }}\n                      >\n                        <Box\n                          bgcolor={color}\n                          height=\"100%\"\n                          width=\"100%\"\n                          borderRadius={0.5}\n                        />\n                      </ResizableBox>\n                    ) : null}\n                  </Box>\n                </React.Fragment>\n              );\n            })}\n          </Stack>\n        ))}\n      </Stack>\n    </Stack>\n  );\n};\n\nGridItem.propTypes = {\n  trackNumber: PropTypes.number.isRequired,\n  trackColor: PropTypes.string,\n  onPlay: PropTypes.func.isRequired,\n  trackName: PropTypes.string,\n};\n\nGridItem.defaultProps = {\n  trackColor: 'yellow',\n  trackName: 'Track 1',\n};\n\nexport default GridItem;\n","/* eslint-disable prefer-template */\nimport React, { useState, useEffect } from 'react';\nimport { Box } from '@mui/material';\nimport * as Tone from 'tone';\nimport groupBy from 'lodash.groupby';\n\nimport PropTypes from 'prop-types';\nimport {\n  DELIMITER, INSTRUMENT_NOTES, NOTATION_VALUES,\n} from './Grid/const';\nimport GridOverlay from './Grid/GridOverlay';\nimport GridItem from './Grid/GridItem';\nimport { TRACK_COLORS } from '../../const';\n\nconst TrackGrid = ({ trackNumber }) => {\n  const [player, setPlayer] = useState(null);\n  const [noteEntries, setNoteEntries] = useState([]);\n  const [playDuration, setPlayDuration] = useState(0);\n  const [displayOverlay, setDisplayOverlay] = useState(false);\n  const [timeoutId, setTimeoutId] = useState(-1);\n  const [resetProgress, setResetProgress] = useState(false);\n  const [playWithLoop, setPlayWithLoop] = useState(false);\n\n  const trackColor = TRACK_COLORS[trackNumber];\n\n  /**\n   * Divide a number to its floored value (whole number division) and its rest.\n   * @param {number} num Number to be divided.\n   * @param {number} divider Divider of the number\n   * @returns {[number, number]} result of the division and the rest of the division\n   */\n  const divide = (num, divider) => [Math.floor(num / divider), num % divider];\n\n  /**\n   * Function to create a Tone.js compliant time object from a duration.\n   * @param {number} duration Duration of the time in grid units.\n   * @returns {Object} Tone.js compliant time object.\n   */\n  const createTimeObject = (duration) => {\n    // note: Assuming that every grid unit -> 8n or 1/8 note\n    const [nValue, nRest] = divide(duration, NOTATION_VALUES['1n']);\n    const [halfNValue, halfNRest] = divide(nRest, NOTATION_VALUES['2n']);\n    const [quarterNValue, quarterNRest] = divide(\n      halfNRest,\n      NOTATION_VALUES['4n'],\n    );\n    const [eighthNValue] = divide(quarterNRest, NOTATION_VALUES['8n']);\n\n    return {\n      '1n': nValue,\n      '2n': halfNValue,\n      '4n': quarterNValue,\n      '8n': eighthNValue,\n    };\n  };\n\n  const toSeconds = (duration) => Tone.Transport.toSeconds(duration);\n  const getTotalNoteDuration = (start, duration) => (toSeconds(start) + toSeconds(duration)) * 1000;\n\n  const stopAudio = () => {\n    setDisplayOverlay(false);\n    setPlayDuration(0);\n    player.dispose();\n    Tone.Transport.cancel(playDuration / 1000);\n  };\n\n  const cancelPlayAudio = () => {\n    if (timeoutId !== -1) {\n      clearTimeout(timeoutId);\n      setTimeoutId(-1);\n    }\n    stopAudio();\n  };\n\n  const replayAudio = (entries) => {\n    setResetProgress(true);\n    // eslint-disable-next-line no-use-before-define\n    playAudio(entries);\n  };\n\n  const playAudio = (entries) => {\n    setDisplayOverlay(true);\n    entries.forEach(({ note, noteDatas }) => {\n      noteDatas.forEach(({ duration, start }) => {\n        player.triggerAttackRelease(\n          note.replace('s', '#'),\n          duration,\n          '+' + toSeconds(start),\n        );\n      });\n    });\n\n    const timeout = setTimeout(() => {\n      if (playWithLoop) {\n        replayAudio(entries);\n      } else {\n        stopAudio();\n      }\n    }, playDuration + 500);\n\n    setTimeoutId(timeout);\n  };\n\n  /**\n   * Function to play a grid item.\n   * @param {string[]} items\n   */\n  const play = async (items, instrument, tempo, withLoop) => {\n    setPlayWithLoop(withLoop);\n    Tone.Transport.bpm.value = tempo;\n    const times = items.map((item) => {\n      const [row, col, duration] = item.split(DELIMITER);\n      return {\n        row,\n        duration: createTimeObject(duration),\n        start: createTimeObject(col),\n      };\n    });\n\n    const entries = Object.entries(groupBy(times, (obj) => obj.row)).map(\n      ([row, noteDatas]) => {\n        /**\n         *\n         * @returns {string}\n         */\n        const getNote = () => INSTRUMENT_NOTES[instrument][row];\n\n        return {\n          note: getNote(),\n          noteDatas,\n        };\n      },\n    );\n\n    if (times.length > 0) {\n      const urls = entries.reduce(\n        (a, b) => ({ ...a, [b.note.replace('s', '#').toString()]: b.note + '.mp3' }),\n        {},\n      );\n\n      const sampler = new Tone.Sampler({\n        urls,\n        baseUrl: 'https://louisandrew.github.io/loop-maker/samples/' + instrument + '/',\n        onload: async () => {\n          /**\n           * Gets the total duration of a track.\n           * Retrieve the last note of the current track, then sum its start time and its duration.\n           */\n          const noteDurations = [...times].map(\n            (item) => getTotalNoteDuration(item.start, item.duration),\n          );\n          const totalTrackDuration = noteDurations.sort((a, b) => b - a)[0];\n\n          setPlayDuration(totalTrackDuration);\n          setNoteEntries(entries);\n          setPlayer(sampler);\n\n          await Tone.start();\n        },\n      }).toDestination();\n    }\n  };\n\n  useEffect(() => {\n    if (player && noteEntries) {\n      playAudio(noteEntries);\n    }\n  }, [player]);\n\n  useEffect(() => {\n    if (resetProgress) {\n      setTimeout(() => {\n        setResetProgress(false);\n      }, 100);\n    }\n  }, [resetProgress]);\n\n  return (\n    <Box>\n      <GridOverlay\n        onCancel={cancelPlayAudio}\n        trackColor={trackColor}\n        playDuration={playDuration}\n        display={displayOverlay}\n        reset={resetProgress}\n      />\n      <GridItem trackColor={trackColor} trackName={'Track ' + trackNumber} trackNumber={trackNumber} onPlay={play} />\n    </Box>\n  );\n};\n\nTrackGrid.propTypes = {\n  trackNumber: PropTypes.number.isRequired,\n};\n\nexport default TrackGrid;\n","import React from 'react';\nimport { Box } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport TrackGrid from '../TrackItem/TrackGrid';\n\nconst TrackView = ({ trackNumber }) => (\n  <Box bgcolor=\"primary.bg\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height=\"100vh\">\n    <TrackGrid trackNumber={trackNumber} />\n  </Box>\n);\n\nTrackView.propTypes = {\n  trackNumber: PropTypes.number.isRequired,\n};\n\nexport default TrackView;\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { TRACKS } from '../../const';\nimport Home from './Home';\nimport TrackView from './TrackView';\n\nconst Router = () => (\n  <Routes>\n    <Route path=\"/\" element={<Home />} />\n    {TRACKS.map((trackNumber) => (\n      <Route path={`track-${trackNumber}`} key={`track-${trackNumber}`} element={<TrackView trackNumber={trackNumber} />} />\n    ))}\n  </Routes>\n);\n\nexport default Router;\n","import React from 'react';\nimport { createTheme, ThemeProvider } from '@mui/material';\n\nimport { Colors } from './const';\n\nimport './App.css';\nimport Router from './components/Views/Router';\nimport { TracksProvider } from './hooks/useTracks';\n\nfunction App() {\n  const theme = createTheme({\n    palette: {\n      primary: {\n        ...Colors,\n      },\n    },\n  });\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <TracksProvider>\n          <Router />\n        </TracksProvider>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// eslint-disable-file\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\nimport 'react-resizable/css/styles.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter basename=\"loop-maker\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}