{"version":3,"sources":["components/TrackItem/Grid/const.js","components/TrackItem/Grid/GridOverlay.jsx","components/TrackItem/Grid/GridItem.jsx","components/TrackItem/TrackGrid.jsx","const.js","App.jsx","index.jsx"],"names":["BASE_NOTES","DELIMITER","NOTATION_VALUES","INSTRUMENTS","INSTRUMENT_NOTES","cello","clarinet","flute","harp","piano","saxophone","violin","GridOverlay","playDuration","trackColor","useState","Math","random","progressKey","setProgressKey","progress","setProgress","isActive","resetProgress","useEffect","timer","setInterval","prev","clearInterval","Box","position","bgcolor","display","flexDirection","alignItems","justifyContent","sx","backdropFilter","zIndex","top","left","right","bottom","color","fontWeight","fontSize","width","marginTop","LinearProgress","variant","value","defaultProps","GridItem","onPlay","trackName","activeBox","setActiveBox","activeBoxValues","setActiveBoxValues","key","setKey","instrument","setInstrument","instrumentNotes","useMemo","firstRender","useRef","rerender","current","filter","box","rowIndex","split","length","parseInt","Stack","padding","direction","paddingBottom","paddingLeft","paddingRight","Typography","spacing","Button","onClick","map","backgroundColor","borderColor","FormControl","size","minWidth","InputLabel","id","Select","labelId","defaultValue","label","autoWidth","onChange","e","target","instrumentData","MenuItem","note","borderWidth","borderStyle","borderRadius","transition","height","replace","Array","from","s","columnIndex","idValue","Fragment","opacity","itemId","includes","boxId","omit","toString","axis","handleSize","onResizeStop","event","row","col","resizeValue","floor","nextPosition","some","Boolean","handleBoxResize","TrackGrid","setPlayDuration","divide","num","divider","createTimeObject","duration","nValue","nRest","halfNValue","halfNRest","quarterNValue","quarterNRest","toSeconds","Tone","play","items","a","times","item","start","noteEntries","Object","entries","groupBy","obj","noteDatas","urls","reduce","b","player","baseUrl","onload","noteDurations","totalTrackDuration","sort","setTimeout","dispose","cancel","forEach","triggerAttackRelease","toDestination","Colors","main","secondary","bg","dark","light","yellow","yellow_darker","yellow_c","App","theme","createTheme","palette","primary","className","ThemeProvider","ReactDOM","render","document","getElementById"],"mappings":"wSAAMA,EAAa,CACjB,IACA,KACA,IACA,KACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,KAGIC,GADK,CAAI,KAAJ,OAAYD,EAAeA,GACpB,MAIZE,EACE,EADFA,EAEE,EAFFA,EAGE,EAHFA,EAIE,EAEFC,EAAc,CAClB,gBACA,QAKA,QACA,kBACA,kBAKA,QACA,YACA,UAGIC,EAAmB,CACvB,gBAAiB,CACf,MACA,KACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,KACA,OAEFC,MAAO,CACL,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,MAKFC,SAAU,CACR,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,MAEFC,MAAO,CACL,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,kBAAmB,CACjB,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,MAEF,kBAAmB,CACjB,KACA,MACA,MACA,KAEA,KACA,MACA,MACA,KAEA,KACA,MACA,MACA,MAUFC,KAAM,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEFC,MAAO,CACL,KAEA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KAEA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,MAEFC,UAAW,CACT,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,MAwBFC,OAAQ,CACN,KAEA,KACA,KACA,KACA,KAEA,KACA,KACA,KACA,O,gBCrQEC,EAAc,SAAC,GAAkC,IAAh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","file":"static/js/main.955a98e9.chunk.js","sourcesContent":["const BASE_NOTES = [\n  'B',\n  'A#',\n  'A',\n  'G#',\n  'G',\n  'F#',\n  'F',\n  'E',\n  'D#',\n  'D',\n  'C#',\n  'C',\n];\nconst NOTES = ['C', ...BASE_NOTES, ...BASE_NOTES];\nconst DELIMITER = '__';\nconst GRID_ROWS = 2 * BASE_NOTES.length + 1;\nconst GRID_COLS = 48;\nconst NOTATIONS = ['1n', '2n', '4n', '8n'];\nconst NOTATION_VALUES = {\n  '1n': 8,\n  '2n': 4,\n  '4n': 2,\n  '8n': 1,\n};\nconst INSTRUMENTS = [\n  'bass-electric',\n  'cello',\n  /**\n   * Disabling as I have no idea how the notes are ordered for clarinet\n   */\n  // 'clarinet',\n  'flute',\n  'guitar-acoustic',\n  'guitar-electric',\n  /**\n   * Same problem as above\n   */\n  // 'harp',\n  'piano',\n  'saxophone',\n  'violin',\n];\n\nconst INSTRUMENT_NOTES = {\n  'bass-electric': [\n    'As5',\n    'G5',\n    'E5',\n    'Cs5',\n    'As4',\n    'G4',\n    'E4',\n    'Cs4',\n    'As3',\n    'G3',\n    'E3',\n    'Cs3',\n    'As2',\n    'G2',\n    'E2',\n    'Cs2',\n  ],\n  cello: [\n    'B4',\n    'As4',\n    'A4',\n    'Gs4',\n    'G4',\n    'Fs4',\n    'F4',\n    'E4',\n    'Ds4',\n    'D4',\n    'Cs4',\n    'C4',\n    'B3',\n    'As3',\n    'A3',\n    'Gs3',\n    'G3',\n    'Fs3',\n    'F3',\n    'E3',\n    'Ds3',\n    'D3',\n    'Cs3',\n    'C3',\n  ],\n  /**\n   * Skipping\n   */\n  clarinet: [\n    'F2',\n    'D3',\n    'F3',\n    'D4',\n    'D5',\n    'F4',\n    'Fs5',\n    'As2',\n    'As3',\n    'As4',\n    'D2',\n  ],\n  flute: [\n    'C6',\n    'A5',\n    'E5',\n    'C5',\n    'A4',\n    'E4',\n    'C4',\n    'A3',\n    'E3',\n    'C3',\n  ],\n  'guitar-acoustic': [\n    'B3',\n    'As3',\n    'A3',\n    'Gs3',\n    'G3',\n    'Fs3',\n    'F3',\n    'E3',\n    'Ds3',\n    'D3',\n    'Cs3',\n    'C3',\n    'B2',\n    'As2',\n    'A2',\n    'Gs2',\n    'G2',\n    'Fs2',\n    'F2',\n    'E2',\n    'Ds2',\n    'D2',\n    'Cs2',\n    'C2',\n  ],\n  'guitar-electric': [\n    'A5',\n    'Fs5',\n    'Ds5',\n    'C5',\n\n    'A4',\n    'Fs4',\n    'Ds4',\n    'C4',\n\n    'A3',\n    'Fs3',\n    'Ds3',\n    'C3',\n\n    // 'Fs2',\n    // 'A2',\n    // 'C6',\n    // 'Cs2',\n  ],\n  /**\n   * Disabling\n   */\n  harp: [\n    'B3',\n    'C5',\n    'D2',\n    'D4',\n    'D6',\n    'D7',\n    'E1',\n    'E3',\n    'E5',\n    'F2',\n    'F4',\n    'F6',\n    'F7',\n    'G1',\n    'G3',\n    'G5',\n    'A2',\n    'A4',\n    'A6',\n    'B1',\n    'B5',\n    'B6',\n    'C3',\n  ],\n  piano: [\n    'C5',\n\n    'B4',\n    'As4',\n    'A4',\n    'Gs4',\n    'G4',\n    'Fs4',\n    'F4',\n    'E4',\n    'Ds4',\n    'D4',\n    'Cs4',\n    'C4',\n\n    'B3',\n    'As3',\n    'A3',\n    'Gs3',\n    'G3',\n    'Fs3',\n    'F3',\n    'E3',\n    'Ds3',\n    'D3',\n    'Cs3',\n    'C3',\n  ],\n  saxophone: [\n    'B3',\n    'As3',\n    'A3',\n    'Gs3',\n    'G3',\n    'Fs3',\n    'F3',\n    'E3',\n    'Ds3',\n    'D3',\n    'Cs3',\n    'C3',\n\n    // 'B2',\n    // 'As2',\n\n    // 'E2',\n    // 'Ds4',\n    // 'E4',\n    // 'F2',\n    // 'F4',\n    // 'Fs2',\n    // 'Fs4',\n    // 'G2',\n    // 'G4',\n    // 'Gs2',\n    // 'Gs4',\n    // 'A4',\n    // 'C4',\n    // 'Cs2',\n    // 'Cs4',\n    // 'D2',\n    // 'D4',\n    // 'Ds2',\n  ],\n  violin: [\n    'C6',\n\n    'A5',\n    'G5',\n    'E5',\n    'C5',\n\n    'A4',\n    'G4',\n    'E4',\n    'C4',\n  ],\n};\n\nexport {\n  NOTES,\n  DELIMITER,\n  GRID_COLS,\n  GRID_ROWS,\n  NOTATIONS,\n  NOTATION_VALUES,\n  BASE_NOTES,\n  INSTRUMENTS,\n  INSTRUMENT_NOTES,\n};\n","import React, { useEffect, useState } from 'react';\nimport { Box, LinearProgress } from '@mui/material';\nimport PropTypes from 'prop-types';\n\n/**\n * Component that overlays the grid item when it's playing\n */\nconst GridOverlay = ({ playDuration, trackColor }) => {\n  const [progressKey, setProgressKey] = useState(Math.random());\n  const [progress, setProgress] = useState(0);\n  const isActive = playDuration !== 0;\n\n  /**\n   * Function to reset the current progress bar\n   */\n  const resetProgress = () => {\n    setProgress(0);\n    setProgressKey(Math.random());\n  };\n\n  /**\n   * Will be called everytime the variable `playDuration` changes.\n   * What it does: Sets an interval to update the \"playing audio\" progress bar.\n   */\n  useEffect(() => {\n    let timer;\n\n    if (playDuration > 0) {\n      timer = setInterval(() => {\n        setProgress((prev) => (prev === 100 ? prev : prev + 1));\n      }, playDuration / 100);\n    } else {\n      resetProgress();\n    }\n\n    /**\n     * Cleanup function to clear the interval.\n     */\n    return () => {\n      if (timer) {\n        resetProgress();\n        clearInterval(timer);\n      }\n    };\n  }, [playDuration]);\n\n  return isActive ? (\n    <Box\n      position=\"absolute\"\n      bgcolor=\"rgba(0, 0, 0, 0.1)\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      sx={{\n        backdropFilter: 'blur(1px)',\n        zIndex: 99,\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n      }}\n    >\n      <Box color=\"#fff\" fontWeight=\"bold\" fontSize=\"32px\">\n        PLAYING AUDIO\n      </Box>\n      <Box width=\"20vw\" color={`primary.${trackColor}`} sx={{ marginTop: 3 }}>\n        <LinearProgress\n          key={progressKey}\n          color=\"inherit\"\n          variant=\"determinate\"\n          value={progress}\n        />\n      </Box>\n    </Box>\n  ) : null;\n};\n\nGridOverlay.propTypes = {\n  trackColor: PropTypes.string,\n  playDuration: PropTypes.number.isRequired,\n};\n\nGridOverlay.defaultProps = {\n  trackColor: 'yellow',\n};\n\nexport default GridOverlay;\n","/* eslint-disable react/no-array-index-key */\nimport React, {\n  useEffect, useRef, useState, useMemo,\n} from 'react';\nimport {\n  Stack,\n  Box,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n} from '@mui/material';\nimport omit from 'lodash.omit';\nimport { ResizableBox } from 'react-resizable';\nimport PropTypes from 'prop-types';\nimport {\n  DELIMITER,\n  GRID_COLS,\n  INSTRUMENTS,\n  INSTRUMENT_NOTES,\n} from './const';\n\n/**\n * Grid item where user can clicks on the grid and assign an active note.\n * ![documentation](https://raw.githubusercontent.com/LouisAndrew/loop-maker/docs/docs/images/GridItem.jpeg)\n */\nconst GridItem = ({ trackColor = 'yellow', onPlay, trackName = 'Track 1' }) => {\n  /**\n   * Array of active box positions.\n   * @example [1__2, 2__3]\n   * @type {[String[], | React.SetStateAction]}\n   */\n  const [activeBox, setActiveBox] = useState([]);\n\n  /**\n   * Array of the values (length in number of grids taken) of the active box.\n   * @example { '1__2': 1, '2__3': 2 }\n   * @type {[{[key: string]: number}, React.SetStateAction]}\n   */\n  const [activeBoxValues, setActiveBoxValues] = useState({});\n\n  /**\n   * Key of the whole component (Used to rerender the grids).\n   * @type {[string]}\n   */\n  const [key, setKey] = useState(Math.random());\n\n  /**\n   * Name of the instrument currently active.\n   * @type {[string]}\n   */\n  const [instrument, setInstrument] = useState('piano');\n\n  /**\n   * @type {string[]}\n   */\n  const instrumentNotes = useMemo(\n    () => INSTRUMENT_NOTES[instrument],\n    [instrument],\n  );\n\n  /**\n   * Sets whether the component is done being rendered for the first time.\n   */\n  const firstRender = useRef(true);\n\n  /**\n   * Function to rerender the whole component.\n   */\n  const rerender = () => setKey(Math.random());\n\n  /**\n   * Function to toggle active state of a box (e.g. 1__2).\n   * @param {string} itemId\n   */\n  const toggleActive = (itemId) => {\n    if (!activeBox.includes(itemId)) {\n      setActiveBox([...activeBox, itemId]);\n      setActiveBoxValues({\n        ...activeBoxValues,\n        [itemId.toString()]: 1,\n      });\n    } else {\n      setActiveBox((prev) => prev.filter((boxId) => boxId !== itemId));\n      setActiveBoxValues((prev) => omit(prev, [itemId]));\n    }\n  };\n\n  /**\n   * Function to handle resize action of a box. The function will be called **AFTER** the\n   * user stopped resizing the box.\n   * @param {number} width\n   * @param {string} itemId\n   */\n  const handleBoxResize = (width, itemId) => {\n    const [row, col] = itemId.split(DELIMITER);\n\n    // disable resize if the next column is filled\n    if (activeBox.includes(`${row}${DELIMITER}${parseInt(col, 10) + 1}`)) {\n      rerender();\n      return;\n    }\n\n    const quotient = Math.floor(width / 32); // Whole number division\n    const remainder = width % 32; // Rest of the division\n\n    // Resize value: Difference (in grids) of the active box before and after resize event\n    const resizeValue = quotient + (remainder > 0 ? 1 : 0);\n\n    /**\n     * Next position of the box\n     * @example {resizeValue: 3; itemId: 1__2} -> nextPosition = 1__5\n     */\n    const nextPosition = parseInt(col, 10) + resizeValue - 1;\n\n    const requirements = [\n      activeBox.includes(nextPosition),\n      nextPosition >= GRID_COLS,\n    ];\n\n    if (\n      requirements.some(Boolean) // returns true if all of the `requirements` array is truthy\n    ) {\n      rerender();\n      return;\n    }\n\n    setActiveBoxValues((prev) => ({\n      ...prev,\n      [itemId]: resizeValue,\n    }));\n  };\n\n  /**\n   * Play all of the active notes on the grid.\n   */\n  const handlePlay = () => {\n    onPlay(\n      activeBox.map((box) => `${box}${DELIMITER}${activeBoxValues[box] ?? 0}`),\n      instrument,\n    );\n  };\n\n  /**\n   * Clear all of the active box and its values.\n   */\n  const handleClear = () => {\n    setActiveBox([]);\n    setActiveBoxValues([]);\n  };\n\n  /**\n   * Helper function to initialize an array of length\n   * @param {number} length\n   */\n  const createArray = (length) => Array.from(Array(length));\n\n  useEffect(() => {\n    if (!firstRender.current) {\n      rerender();\n    } else {\n      firstRender.current = false;\n    }\n  }, [activeBox, activeBoxValues]);\n\n  useEffect(() => {\n    if (!firstRender.current) {\n      setActiveBox((prev) => prev.filter((box) => {\n        const rowIndex = box.split(DELIMITER)[0];\n        return instrumentNotes.length > parseInt(rowIndex, 10);\n      }));\n    }\n  }, [instrumentNotes]);\n\n  const color = `primary.${trackColor}`;\n  const BOX_SIZE = 24;\n\n  return (\n    <Stack padding={4}>\n      <Stack direction=\"row\" alignItems=\"flex-end\" justifyContent=\"space-between\" paddingBottom={2} paddingLeft=\"54px\" paddingRight=\"27px\">\n        <Typography color={color} variant=\"h5\" fontWeight=\"bold\">\n          {trackName}\n        </Typography>\n        <Stack\n          direction=\"row\"\n          alignItems=\"flex-end\"\n          spacing={1}\n        >\n          <Button\n            onClick={handlePlay}\n            sx={{\n              backgroundColor: color,\n              '&:hover': { backgroundColor: color },\n            }}\n          >\n            Play\n          </Button>\n          <Button\n            onClick={handleClear}\n            variant=\"outlined\"\n            sx={{ color, borderColor: color }}\n          >\n            Clear\n          </Button>\n          <Box sx={{ width: 64 }}>\n            <FormControl size=\"small\" sx={{ minWidth: 80 }}>\n              <InputLabel id=\"instrument\" sx={{ color }}>\n                Instrument\n              </InputLabel>\n              <Select\n                labelId=\"instrument\"\n                id=\"instrument-input\"\n                value={instrument}\n                defaultValue=\"piano\"\n                label=\"Instrument\"\n                autoWidth\n                variant=\"filled\"\n                onChange={(e) => setInstrument(e.target.value)}\n                sx={{ color }}\n              >\n                {INSTRUMENTS.map((instrumentData) => (\n                  <MenuItem value={instrumentData} key={instrumentData}>\n                    {instrumentData}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Box>\n        </Stack>\n      </Stack>\n      <Stack spacing={0.25} key={key}>\n        {instrumentNotes.map((note, rowIndex) => (\n          <Stack\n            width=\"fit-content\"\n            spacing={0.25}\n            direction=\"row\"\n            alignItems=\"center\"\n            key={`row-${rowIndex}`}\n            sx={{\n              borderWidth: 1,\n              borderStyle: 'solid',\n              borderColor: 'transparent',\n              borderRadius: 0.5,\n              '&:hover': {\n                borderColor: color,\n                transition: '200ms',\n              },\n            }}\n          >\n            <Box\n              height={BOX_SIZE}\n              width={50}\n              display=\"flex\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              fontWeight=\"bold\"\n              color={color}\n            >\n              {note.replace('s', '#')}\n            </Box>\n            {createArray(GRID_COLS).map((s, columnIndex) => {\n              const id = `${rowIndex}${DELIMITER}${columnIndex}`;\n              const idValue = activeBoxValues[id];\n              return (\n                <React.Fragment key={`col-${columnIndex}`}>\n                  <Box\n                    width={BOX_SIZE}\n                    height={BOX_SIZE}\n                    borderRadius={0.5}\n                    sx={{\n                      backgroundColor: 'primary.dark',\n                      '&:hover': {\n                        backgroundColor: 'primary.main',\n                        opacity: [0.9, 0.8, 0.7],\n                      },\n                    }}\n                    onClick={() => toggleActive(id)}\n                  >\n                    {activeBox.includes(id) && idValue ? (\n                      <ResizableBox\n                        height={BOX_SIZE}\n                        width={idValue * BOX_SIZE + (idValue - 1) * 2}\n                        axis=\"x\"\n                        handleSize={[10, 10]}\n                        onResizeStop={(event, { size }) => {\n                          handleBoxResize(size.width, id);\n                        }}\n                      >\n                        <Box\n                          bgcolor={color}\n                          height=\"100%\"\n                          width=\"100%\"\n                          borderRadius={0.5}\n                        />\n                      </ResizableBox>\n                    ) : null}\n                  </Box>\n                </React.Fragment>\n              );\n            })}\n          </Stack>\n        ))}\n      </Stack>\n    </Stack>\n  );\n};\n\nGridItem.propTypes = {\n  trackColor: PropTypes.string,\n  onPlay: PropTypes.func.isRequired,\n  trackName: PropTypes.string,\n};\n\nGridItem.defaultProps = {\n  trackColor: 'yellow',\n  trackName: 'Track 1',\n};\n\nexport default GridItem;\n","/* eslint-disable prefer-template */\nimport React, { useState } from 'react';\nimport { Box } from '@mui/material';\nimport * as Tone from 'tone';\nimport groupBy from 'lodash.groupby';\n\nimport {\n  DELIMITER, INSTRUMENT_NOTES, NOTATION_VALUES,\n} from './Grid/const';\nimport GridOverlay from './Grid/GridOverlay';\nimport GridItem from './Grid/GridItem';\n\nconst TrackGrid = () => {\n  const [playDuration, setPlayDuration] = useState(0);\n\n  /**\n   * Divide a number to its floored value (whole number division) and its rest.\n   * @param {number} num Number to be divided.\n   * @param {number} divider Divider of the number\n   * @returns {[number, number]} result of the division and the rest of the division\n   */\n  const divide = (num, divider) => [Math.floor(num / divider), num % divider];\n\n  /**\n   * Function to create a Tone.js compliant time object from a duration.\n   * @param {number} duration Duration of the time in grid units.\n   * @returns {Object} Tone.js compliant time object.\n   */\n  const createTimeObject = (duration) => {\n    // note: Assuming that every grid unit -> 8n or 1/8 note\n    const [nValue, nRest] = divide(duration, NOTATION_VALUES['1n']);\n    const [halfNValue, halfNRest] = divide(nRest, NOTATION_VALUES['2n']);\n    const [quarterNValue, quarterNRest] = divide(\n      halfNRest,\n      NOTATION_VALUES['4n'],\n    );\n    const [eighthNValue] = divide(quarterNRest, NOTATION_VALUES['8n']);\n\n    return {\n      '1n': nValue,\n      '2n': halfNValue,\n      '4n': quarterNValue,\n      '8n': eighthNValue,\n    };\n  };\n\n  const toSeconds = (duration) => Tone.Transport.toSeconds(duration);\n  const getTotalNoteDuration = (start, duration) => (toSeconds(start) + toSeconds(duration)) * 1000;\n\n  /**\n   * Function to play a grid item.\n   * @param {string[]} items\n   */\n  const play = async (items, instrument) => {\n    const times = items.map((item) => {\n      const [row, col, duration] = item.split(DELIMITER);\n      return {\n        row,\n        duration: createTimeObject(duration),\n        start: createTimeObject(col),\n      };\n    });\n\n    const noteEntries = Object.entries(groupBy(times, (obj) => obj.row)).map(\n      ([row, noteDatas]) => {\n        /**\n         *\n         * @returns {string}\n         */\n        const getNote = () => INSTRUMENT_NOTES[instrument][row];\n\n        return {\n          note: getNote(),\n          noteDatas,\n        };\n      },\n    );\n\n    if (times.length > 0) {\n      const urls = noteEntries.reduce(\n        (a, b) => ({ ...a, [b.note.replace('s', '#').toString()]: b.note + '.mp3' }),\n        {},\n      );\n\n      const player = new Tone.Sampler({\n        urls,\n        baseUrl: 'https://louisandrew.github.io/loop-maker/samples/' + instrument + '/',\n        onload: async () => {\n          /**\n           * Gets the total duration of a track.\n           * Retrieve the last note of the current track, then sum its start time and its duration.\n           */\n          const noteDurations = [...times].map(\n            (item) => getTotalNoteDuration(item.start, item.duration),\n          );\n          const totalTrackDuration = noteDurations.sort((a, b) => b - a)[0];\n\n          setPlayDuration(totalTrackDuration);\n\n          setTimeout(() => {\n            setPlayDuration(0);\n            player.dispose();\n          }, totalTrackDuration + 500);\n          Tone.Transport.cancel(totalTrackDuration / 1000);\n\n          await Tone.start();\n          noteEntries.forEach(({ note, noteDatas }) => {\n            noteDatas.forEach(({ duration, start }) => {\n              player.triggerAttackRelease(\n                note.replace('s', '#'),\n                duration,\n                '+' + toSeconds(start),\n              );\n            });\n          });\n        },\n      }).toDestination();\n    }\n  };\n\n  return (\n    <Box>\n      <GridOverlay trackColor=\"yellow\" playDuration={playDuration} />\n      <GridItem trackColor=\"yellow\" onPlay={play} />\n    </Box>\n  );\n};\n\nexport default TrackGrid;\n","export const Colors = {\n  main: '#646464',\n  secondary: '#fff',\n  bg: '#3E3C3C',\n  dark: '#525151',\n  light: '#706c6c',\n  yellow: '#E3EA91',\n  yellow_darker: '#edd640',\n  yellow_c: '#eeff00',\n};\n","import React from 'react';\nimport { createTheme, ThemeProvider, Box } from '@mui/material';\n\nimport TrackGrid from './components/TrackItem/TrackGrid';\nimport { Colors } from './const';\n\nimport './App.css';\n\nfunction App() {\n  const theme = createTheme({\n    palette: {\n      primary: {\n        ...Colors,\n      },\n    },\n  });\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <Box bgcolor=\"primary.bg\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height=\"100vh\">\n          <TrackGrid />\n        </Box>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// eslint-disable-file\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'react-resizable/css/styles.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}