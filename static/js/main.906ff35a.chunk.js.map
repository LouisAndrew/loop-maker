{"version":3,"sources":["const.js","hooks/useTracks.jsx","hooks/usePlayer.jsx","components/Views/Home.jsx","components/TrackItem/Grid/GridOverlay.jsx","components/TrackItem/Grid/GridItem.jsx","components/TrackItem/TrackGrid.jsx","components/Views/TrackView.jsx","components/Views/Router.jsx","App.jsx","index.jsx"],"names":["Colors","main","secondary","bg","dark","light","red","yellow","blue","green","white","TRACKS","TRACK_COLORS","BASE_NOTES","DELIMITER","NOTATION_VALUES","INSTRUMENTS","INSTRUMENT_NOTES","cello","clarinet","flute","harp","piano","saxophone","violin","activeBoxesDefault","reduce","a","b","activeBoxesValuesDefault","instrumentsDefault","TracksContext","createContext","activeBoxes","activeBoxesValues","instruments","tempo","gridLength","TracksProvider","children","useState","setActiveBoxes","setActiveBoxesValues","setInstruments","setTempo","setGridLength","getSetter","useCallback","trackNumber","indexOf","setActiveBox","value","prev","setActiveBoxValues","setInstrument","Provider","useTracks","useContext","divide","num","divider","Math","floor","createTimeObject","duration","nValue","nRest","halfNValue","halfNRest","quarterNValue","quarterNRest","toSeconds","Tone","PlayerContext","playDuration","displayOverlay","resetProgress","cancelPlayAudio","play","playSingleAudio","playMultipleAudio","defaultValue","notReady","isPlayingMultipleTracks","id","includes","PlayerProvider","playerId","setPlayerId","playerGroup","setPlayerGroup","readyState","setReadyState","noteEntryGroup","setNoteEntryGroup","setPlayDuration","setDisplayOverlay","timeoutId","setTimeoutId","setResetProgress","playWithLoop","setPlayWithLoop","stopAudio","p","cancel","dispose","split","forEach","replayAudio","entries","playAudio","note","noteDatas","start","triggerAttackRelease","replace","timeout","setTimeout","getNotes","map","box","bpm","instrument","times","item","row","col","Object","groupBy","obj","length","urls","toString","sampler","baseUrl","onload","toDestination","withLoop","totalTrackDuration","singlePlayer","tracks","keys","filter","key","values","join","Promise","all","trackId","samplers","checkIsReady","useEffect","ids","every","clearTimeout","usePlayer","Home","to","Box","Button","onClick","GridOverlay","trackColor","display","onCancel","reset","random","progressKey","setProgressKey","progress","setProgress","isActive","timer","setInterval","clearInterval","color","position","bgcolor","flexDirection","alignItems","justifyContent","sx","backdropFilter","zIndex","top","left","right","bottom","fontWeight","fontSize","width","marginTop","LinearProgress","variant","borderColor","defaultProps","GridItem","onPlay","trackName","activeBox","useMemo","activeBoxValues","setWithLoop","setKey","instrumentNotes","firstRender","useRef","rerender","filterOldBoxes","rowIndex","colIndex","parseInt","current","newValue","newBoxValue","k","Stack","direction","paddingBottom","spacing","IconButton","Typography","marginLeft","backgroundColor","marginRight","FormGroup","FormControlLabel","control","Checkbox","onChange","e","target","checked","label","InputLabel","Slider","size","max","min","_","FormControl","minWidth","Select","labelId","autoWidth","len","MenuItem","instrumentData","borderWidth","borderStyle","borderRadius","transition","height","Array","from","s","columnIndex","idValue","Fragment","opacity","itemId","boxId","omit","axis","handleSize","onResizeStop","event","resizeValue","nextPosition","some","Boolean","handleBoxResize","TrackGrid","TrackView","Router","path","element","App","theme","createTheme","palette","primary","className","ThemeProvider","ReactDOM","render","basename","document","getElementById"],"mappings":"yPAAaA,EAAS,CACpBC,KAAM,UACNC,UAAW,OACXC,GAAI,UACJC,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,OAAQ,UACRC,KAAM,UACNC,MAAO,UACPC,MAAO,QAGIC,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,GAEtBC,EAAe,CAC1B,EAAG,MACH,EAAG,SACH,EAAG,OACH,EAAG,QACH,EAAG,SAGCC,EAAa,CACjB,IACA,KACA,IACA,KACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,KAGIC,GADK,CAAI,KAAJ,OAAYD,EAAeA,GACpB,MAIZE,EACE,EADFA,EAEE,EAFFA,EAGE,EAHFA,EAIE,EAEFC,EAAc,CAClB,gBACA,QAKA,QACA,kBACA,kBAKA,QACA,YACA,UAGIC,EAAmB,CACvB,gBAAiB,CACf,MACA,KACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,KACA,OAEFC,MAAO,CACL,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,MAKFC,SAAU,CACR,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,MAEFC,MAAO,CACL,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,kBAAmB,CACjB,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,MAEF,kBAAmB,CACjB,KACA,MACA,MACA,KAEA,KACA,MACA,MACA,KAEA,KACA,MACA,MACA,MAUFC,KAAM,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEFC,MAAO,CACL,KAEA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KAEA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,MAEFC,UAAW,CACT,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,MAwBFC,OAAQ,CACN,KAEA,KACA,KACA,KACA,KAEA,KACA,KACA,KACA,O,yGC7REC,EAAqBd,EAAOe,QAAO,SAACC,EAAGC,GAAJ,mBAAC,eAAeD,GAAhB,kBAAoBC,EAAI,OAAO,IAClEC,EAA2BlB,EAAOe,QAAO,SAACC,EAAGC,GAAJ,mBAAC,eAAeD,GAAhB,kBAAoBC,EAAI,OAAO,IACxEE,EAAqBnB,EAAOe,QAAO,SAACC,EAAGC,GAAJ,mBAAC,eAAeD,GAAhB,kBAAoBC,EAAI,YAAY,IAEvEG,EAAgBC,wBAAc,CAClCC,YAAaR,EACbS,kBAAmBL,EACnBM,YAAaL,EACbM,MAAO,IACPC,WAAY,KAGDC,EAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC/B,EAAsCC,mBAASf,GAA/C,mBAAOQ,EAAP,KAAoBQ,EAApB,KACA,EAAkDD,mBAASX,GAA3D,mBAAOK,EAAP,KAA0BQ,EAA1B,KACA,EAAsCF,mBAASV,GAA/C,mBAAOK,EAAP,KAAoBQ,EAApB,KAEA,EAA0BH,mBAAS,KAAnC,mBAAOJ,EAAP,KAAcQ,EAAd,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOH,EAAP,KAAmBQ,EAAnB,KAEMC,EAAYC,uBAAY,SAACC,GAC7B,IAAqC,IAAjCrC,EAAOsC,QAAQD,GAAqB,CAsBtC,MAAO,CACLE,aAtBmB,SAACC,GACpBV,GAAe,SAACW,GAAD,mBAAC,eACXA,GADU,kBAEZJ,EAAcG,QAoBjBE,mBAhByB,SAACF,GAC1BT,GAAqB,SAACU,GAAD,mBAAC,eACjBA,GADgB,kBAElBJ,EAAcG,QAcjBG,cAVoB,SAACH,GACrBR,GAAe,SAACS,GAAD,mBAAC,eACXA,GADU,kBAEZJ,EAAcG,QAQjBP,WACAC,iBAIJ,MAAO,CACLK,aAAc,aACdG,mBAAoB,aACpBC,cAAe,gBAEhB,IAEH,OACE,cAACvB,EAAcwB,SAAf,CAAwBJ,MAAO,CAC7BL,YACAb,cACAC,oBACAC,cACAC,QACAC,cANF,SASGE,KAYMiB,EAAY,kBAAMC,qBAAW1B,ICnEpC2B,EAAS,SAACC,EAAKC,GAAN,MAAkB,CAACC,KAAKC,MAAMH,EAAMC,GAAUD,EAAMC,IAO7DG,EAAmB,SAACC,GAExB,MAAwBN,EAAOM,EAAUjD,GAAzC,mBAAOkD,EAAP,KAAeC,EAAf,KACA,EAAgCR,EAAOQ,EAAOnD,GAA9C,mBAAOoD,EAAP,KAAmBC,EAAnB,KACA,EAAsCV,EACpCU,EACArD,GAFF,mBAAOsD,EAAP,KAAsBC,EAAtB,KAIA,EAAuBZ,EAAOY,EAAcvD,GAE5C,MAAO,CACL,KAAMkD,EACN,KAAME,EACN,KAAME,EACN,KANF,sBAUIE,EAAY,SAACP,GAAD,OAAcQ,IAAeD,UAAUP,IAE5CS,EAAgBzC,wBAAc,CACzC0C,aAAc,EACdC,gBAAgB,EAChBC,eAAe,EACfC,gBAAiB,aACjBC,KAAM,aACNC,gBAAiB,aACjBC,kBAAmB,eAGfC,EAAetE,EAAOe,QAAO,SAACC,EAAGC,GAAJ,mBAAC,eAAeD,GAAhB,kBAAoBC,EAAI,SAAS,IAC9DsD,EAAWvE,EAAOe,QAAO,SAACC,EAAGC,GAAJ,mBAAC,eAAeD,GAAhB,kBAAoBC,GAAI,MAAU,IAE3DuD,EAA0B,SAACC,GAAD,MAAsB,kBAAPA,GAAmBA,EAAGC,SAASvE,IAGjEwE,EAAiB,SAAC,GAAkB,IAAhB/C,EAAe,EAAfA,SAC/B,EAEIiB,IADFpB,EADF,EACEA,MAAOC,EADT,EACSA,WAAYJ,EADrB,EACqBA,YAAaC,EADlC,EACkCA,kBAAmBC,EADrD,EACqDA,YAGrD,EAAgCK,mBAPjB,IAOf,mBAAO+C,EAAP,KAAiBC,EAAjB,KACA,EAAsChD,mBAASyC,GAA/C,mBAAOQ,EAAP,KAAoBC,EAApB,KACA,EAAoClD,mBAAS0C,GAA7C,mBAAOS,EAAP,KAAmBC,EAAnB,KACA,EAA4CpD,mBAASyC,GAArD,mBAAOY,EAAP,KAAuBC,EAAvB,KAEA,EAAwCtD,mBAAS,GAAjD,mBAAOkC,EAAP,KAAqBqB,EAArB,KACA,EAA4CvD,oBAAS,GAArD,mBAAOmC,EAAP,KAAuBqB,EAAvB,KACA,EAAkCxD,oBAAU,GAA5C,mBAAOyD,EAAP,KAAkBC,EAAlB,KACA,GAA0C1D,oBAAS,GAAnD,qBAAOoC,GAAP,MAAsBuB,GAAtB,MACA,GAAwC3D,oBAAS,GAAjD,qBAAO4D,GAAP,MAAqBC,GAArB,MAQMC,GAAY,SAACC,GACjB,GAAI7B,EAAe,EAAG,CAEpB,GARFsB,GAAkB,GAClBD,EAAgB,GAChBvB,IAAegC,OAAO9B,EAAe,KAM/B6B,IAAMpB,EAAwBI,GAChCgB,EAAEE,UAEFf,GAAe,SAACtC,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBmC,EAAW,UACjDK,GAAc,SAACxC,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBmC,GAAW,YAEpCA,EAASmB,MAAM5F,GACvB6F,SAAQ,SAACvB,GACXK,EAAYL,GAAIqB,aAGlBf,EAAeT,GACfW,EAAcV,GAGhBM,EA1CW,MAuDToB,GAAc,SAACC,EAASN,GAC5BJ,IAAiB,GAEjBW,GAAUD,EAASN,IAGfO,GAAY,SAACD,EAASN,GAC1BP,GAAkB,GAClBa,EAAQF,SAAQ,YAA0B,IAAvBI,EAAsB,EAAtBA,KAAsB,EAAhBC,UACbL,SAAQ,YAA0B,IAAvB3C,EAAsB,EAAtBA,SAAUiD,EAAY,EAAZA,MAC7BV,EAAEW,qBACAH,EAAKI,QAAQ,IAAK,KAClBnD,EACA,IAAMO,EAAU0C,UAKtB,IAAMG,EAAUC,YAAW,WACrBjB,GACFQ,GAAYC,EAASN,GAErBD,GAAWnB,EAAwBI,GAAgB,KAAJgB,KAEhD7B,EAAe,KAElBwB,EAAakB,IAGTE,GAAW,SAAClC,GAAD,OAAQnD,EAAYmD,GAAImC,KACvC,SAACC,GAAD,sBAAYA,GAAZ,OAAkB1G,GAAlB,iBAA8BoB,EAAkBkD,GAAIoC,UAApD,QAA4D,OAOxD1C,GAAI,uCAAG,WAAOM,GAAP,uBAAAzD,EAAA,yDACX6C,IAAeiD,IAAItE,MAAQf,EAErBsF,EAAavF,EAAYiD,GAEzBuC,EAAQL,GAASlC,GAAImC,KAAI,SAACK,GAC9B,MAA6BA,EAAKlB,MAAM5F,GAAxC,mBAAO+G,EAAP,KAAYC,EAAZ,KAAiB9D,EAAjB,KACA,MAAO,CACL6D,MACA7D,SAAUD,EAAiBC,GAC3BiD,MAAOlD,EAAiB+D,OAItBjB,EAAUkB,OAAOlB,QAAQmB,IAAQL,GAAO,SAACM,GAAD,OAASA,EAAIJ,QAAMN,KAC/D,YAAuB,IAAD,mBAApBM,EAAoB,KAAfb,EAAe,KAOpB,MAAO,CACLD,KAHoB9F,EAAiByG,GAAYG,GAIjDb,kBAKFW,EAAMO,OAAS,GA7BR,uBA8BHC,EAAOtB,EAAQnF,QACnB,SAACC,EAAGC,GAAJ,mBAAC,eACID,GADL,kBAEGC,EAAEmF,KAAKI,QAAQ,IAAK,KAAKiB,WAAaxG,EAAEmF,KAAO,WAElD,IAGIsB,EAAU,IAAI7D,IAAa,CAC/B2D,OACAG,QACE,oDACEZ,EACA,IACJa,OAAO,WAAD,4BAAE,sBAAA5G,EAAA,6DAINmE,GAAkB,SAAC1C,GAAD,mBAAC,eACdA,GADa,kBAEfgC,EAAKyB,OAGRjB,GAAc,SAACxC,GAAD,mBAAC,eACVA,GADS,kBAEXgC,GAAK,OAXF,SAcAZ,MAdA,2CAAF,kDAAC,KAgBNgE,gBA5DM,kBA6DFH,GA7DE,gCAgEJ,MAhEI,2CAAH,sDAmEJtD,GAAe,uCAAG,WAAOK,EAAIqD,GAAX,iBAAA9G,EAAA,6DAChB+G,EAA+D,IAA1CnE,EAAUR,EAAiB1B,IACtD0D,EAAgB2C,GAChBlD,EAAYJ,GACZiB,GAAgBoC,GAJM,SAMK3D,GAAKM,GANV,OAMhBuD,EANgB,OAQtBjD,GAAe,SAACtC,GAAD,mBAAC,eACXA,GADU,kBAEZgC,EAAKuD,OAVc,2CAAH,wDAcf3D,GAAiB,uCAAG,WAAOyD,GAAP,mBAAA9G,EAAA,6DAClBiH,EAASb,OAAOc,KAAK3G,GAAmB4G,QAC5C,SAACC,GAAD,OAAShB,OAAOiB,OAAO9G,EAAkB6G,IAAMb,OAAS,KAE1D1C,EAAYoD,EAAOV,OAAS,EAAIU,EAAOK,KAAKnI,GAjL/B,IAmLP4H,EAA+D,IAA1CnE,EAAUR,EAAiB1B,IACtD0D,EAAgB2C,GAChBrC,GAAgBoC,GARQ,SAUDS,QAAQC,IAC7BP,EAAOrB,IAAP,uCAAW,WAAO6B,GAAP,SAAAzH,EAAA,mFAAuByH,EAAvB,SAAuCtE,GAAKsE,GAA5C,iHAAX,wDAXsB,OAUlBC,EAVkB,OAcxB3D,GAAe,SAACtC,GAAD,mBAAC,eACXA,GACAiG,EAAS3H,QAAO,SAACC,EAAGC,GAAJ,mBAAC,eAAeD,GAAMC,KAAM,QAhBzB,2CAAH,sDAoBjB0H,GAAe,SAAClE,GAAD,OAAQO,EAAWP,IAAOK,EAAYL,IAyB3D,OAvBAmE,qBAAU,WACJ3E,IACFyC,YAAW,WACTlB,IAAiB,KAChB,OAEJ,CAACvB,KAEJ2E,qBAAU,WACR,GAAKpE,EAAwBI,GAItB,CACL,IAAMiE,EAAMjE,EAASmB,MAAM5F,GACvB0I,EAAIC,MAAMH,KACZE,EAAI7C,SAAQ,SAACvB,GACX0B,GAAUjB,EAAeT,GAAKK,EAAYL,YAP1CkE,GAAa/D,IACfuB,GAAUjB,EAAeN,GAAWE,EAAYF,MAUnD,CAACI,EAAYF,IAGd,cAAChB,EAAclB,SAAf,CACEJ,MAAO,CACLwB,iBACAD,eACAE,iBACAE,QACAD,gBAnLkB,YACH,IAAfoB,IACFyD,aAAazD,GACbC,GAAc,IAGhBI,GAAWnB,EAAwBI,GAAoC,KAAxBE,EAAYF,KA8KvDR,mBACAC,sBARJ,SAWGzC,KASMoH,EAAY,kBAAMlG,qBAAWgB,IClQ3BmF,EApCF,WACX,MAA8DD,IAAtD3E,EAAR,EAAQA,kBAAmBL,EAA3B,EAA2BA,eAAgBI,EAA3C,EAA2CA,gBAE3C,OACE,gCACE,2CACCpE,EAAO4G,KAAI,SAACvE,GAAD,OACV,gCACA,cAAC,IAAD,CAAM6G,GAAE,gBAAW7G,GAAnB,SACE,eAAC8G,EAAA,EAAD,yBAEG,IACA9G,MAJL,gBAAgDA,EAAhD,UASA,cAAC+G,EAAA,EAAD,CAAQC,QAAS,kBAAMjF,EAAgB/B,GAAa,IAApD,8BAMD2B,GACC,cAACmF,EAAA,EAAD,iCAKF,cAACC,EAAA,EAAD,CAAQC,QAAShF,EAAjB,gC,SC5BAiF,EAAc,SAAC,GAEd,IADLvF,EACI,EADJA,aAAcwF,EACV,EADUA,WAAYC,EACtB,EADsBA,QAASC,EAC/B,EAD+BA,SAAUC,EACzC,EADyCA,MAE7C,EAAsC7H,mBAASqB,KAAKyG,UAApD,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAgChI,mBAAS,GAAzC,mBAAOiI,EAAP,KAAiBC,EAAjB,KACMC,EAA4B,IAAjBjG,GAAsByF,EAKjCvF,EAAgB,WACpB8F,EAAY,GACZF,EAAe3G,KAAKyG,WAOtBf,qBAAU,WACR,IAAIqB,EAiBJ,OAfIP,GACFzF,IAGEF,EAAe,EACjBkG,EAAQC,aAAY,WAClBH,GAAY,SAACtH,GAAD,OAAoB,MAATA,EAAeA,EAAOA,EAAO,OACnDsB,EAAe,KAElBE,IAMK,WACDgG,IACFhG,IACAkG,cAAcF,OAGjB,CAAClG,EAAcyF,EAASE,IAE3B,IAAMU,EAAK,kBAAcb,GAEzB,OAAOS,EACL,eAACb,EAAA,EAAD,CACEkB,SAAS,WACTC,QAAQ,qBACRd,QAAQ,OACRe,cAAc,SACdC,WAAW,SACXC,eAAe,SACfC,GAAI,CACFC,eAAgB,YAChBC,OAAQ,GACRC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,GAbZ,UAgBE,cAAC7B,EAAA,EAAD,CAAKiB,MAAM,OAAOa,WAAW,OAAOC,SAAS,OAA7C,2BAGA,cAAC/B,EAAA,EAAD,CAAKgC,MAAM,OAAOf,MAAOA,EAAOM,GAAI,CAAEU,UAAW,GAAjD,SACE,cAACC,EAAA,EAAD,CAEEjB,MAAM,UACNkB,QAAQ,cACR9I,MAAOsH,GAHFF,KAMT,cAACR,EAAA,EAAD,CAAQC,QAASI,EAAU6B,QAAQ,WAAWZ,GAAI,CAAEN,QAAOmB,YAAanB,EAAOgB,UAAW,GAA1F,uBAIA,MAWN9B,EAAYkC,aAAe,CACzBjC,WAAY,SACZE,SAAU,cAGGH,Q,wKCtETmC,GAAW,SAAC,GAKX,IAAD,IAJJlC,kBAII,MAJS,SAIT,EAHJmC,EAGI,EAHJA,OAGI,IAFJC,iBAEI,MAFQ,UAER,EADJtJ,EACI,EADJA,YAEA,EAEIQ,IADFV,EADF,EACEA,UAAWb,EADb,EACaA,YAAaC,EAD1B,EAC0BA,kBAAmBC,EAD7C,EAC6CA,YAAaE,EAD1D,EAC0DA,WAAYD,EADtE,EACsEA,MAGhEmK,EAAYC,mBAAQ,kBAAMvK,EAAYe,KAAc,CAACf,IACrDwK,EAAkBD,mBACtB,kBAAMtK,EAAkBc,KACxB,CAACd,IAEGwF,EAAa8E,mBAAQ,kBAAMrK,EAAYa,KAAc,CAACb,IAE5D,EAEIqK,mBACF,kBAAM1J,EAAUE,KAChB,CAACA,IAHDE,EADF,EACEA,aAAcG,EADhB,EACgBA,mBAAoBC,EADpC,EACoCA,cAAeV,EADnD,EACmDA,SAAUC,EAD7D,EAC6DA,cAM7D,EAAgCL,oBAAS,GAAzC,mBAAOiG,EAAP,KAAiBiE,EAAjB,KAUA,MAAsBlK,mBAASqB,KAAKyG,UAApC,mBAAOvB,EAAP,KAAY4D,EAAZ,KAKMC,EAAkBJ,mBACtB,kBAAMvL,EAAiByG,KACvB,CAACA,IAMGmF,EAAcC,kBAAO,GAKrBC,EAAW,kBAAMJ,EAAO9I,KAAKyG,WAwF7B0C,EAAiB,SAACxF,GACtB,MAA6BA,EAAId,MAAM5F,GAAvC,mBAAOmM,EAAP,KAAiBC,EAAjB,KACA,OACEN,EAAgB1E,OAASiF,SAASF,EAAU,KAAOC,EAAW7K,GAIlEkH,qBAAU,WACHsD,EAAYO,QAGfP,EAAYO,SAAU,EAFtBL,MAID,CAACR,EAAWE,IAEflD,qBAAU,WACR,IAAKsD,EAAYO,QAAS,CACxB,IAAMC,EAAWd,EAAUzD,OAAOkE,GAE5BM,EAAcvF,OAAOc,KAAK4D,GAAiB3D,OAAOkE,GAExD9J,EAAamK,GACbhK,EACEiK,EACG/F,KAAI,SAACgG,GAAD,sBAAWA,EAAId,EAAgBc,OACnC7L,QAAO,SAACC,EAAGC,GAAJ,mBAAC,eAAeD,GAAMC,KAAM,QAGzC,CAACgL,EAAiBvK,IAErB,IAAM0I,EAAK,kBAAcb,GAGzB,OACE,eAACsD,GAAA,EAAD,WACE,eAACA,GAAA,EAAD,CACEC,UAAU,MACVtC,WAAW,WACXuC,cAAe,EACfC,QAAS,EAJX,UAME,eAACH,GAAA,EAAD,CACEC,UAAU,MACVtC,WAAW,SACXC,eAAe,aACfuC,QAAS,EAJX,UAME,cAAC,IAAD,CAAM9D,GAAG,IAAT,SACE,cAAC+D,GAAA,EAAD,CAAY,aAAW,OAAOvC,GAAI,CAAEN,SAApC,SACE,cAAC,KAAD,QAGJ,cAAC8C,GAAA,EAAD,CACE9C,MAAOA,EACPkB,QAAQ,KACRL,WAAW,OACXP,GAAI,CAAEyC,WAAY,QAJpB,SAMGxB,IAEH,cAACvC,EAAA,EAAD,CACEC,QAlFS,WACjBqC,EACErJ,EACAyF,IAgFM4C,GAAI,CACF0C,gBAAiBhD,EACjB+C,WAAY,OACZE,YAAa,OACb,UAAW,CAAED,gBAAiBhD,IANlC,kBAWA,cAAChB,EAAA,EAAD,CACEC,QAnFU,WAClB9G,EAAa,IACbG,EAAmB,KAkFX4I,QAAQ,WACRZ,GAAI,CAAEN,QAAOmB,YAAanB,GAH5B,mBAOA,cAACkD,GAAA,EAAD,UACE,cAACC,GAAA,EAAD,CACEC,QACE,cAACC,GAAA,EAAD,CACEC,SAAU,SAACC,GACT5B,EAAY4B,EAAEC,OAAOC,UAEvBnD,GAAI,CACFN,QACA,gBAAiB,CACfA,YAKRM,GAAI,CAAEN,SACN0D,MAAM,cAIZ,eAACjB,GAAA,EAAD,CAAOC,UAAU,MAAMtC,WAAW,WAAWwC,QAAS,EAAtD,UACE,eAAC7D,EAAA,EAAD,CAAKuB,GAAI,CAAES,MAAO,KAAlB,UACE,eAAC4C,GAAA,EAAD,CAAYtJ,GAAG,QAAQiG,GAAI,CAAEN,SAA7B,mBAEG,IACA3I,KAEH,cAACuM,GAAA,EAAD,CACEC,KAAK,QACLzL,MAAOf,EACPgD,GAAG,QACHyJ,IAAK,IACLC,IAAK,GACLT,SAjOZ,SAAqBU,EAAG1B,GACtBzK,EAASyK,SAmOH,cAACvD,EAAA,EAAD,CAAKuB,GAAI,CAAES,MAAO,IAAlB,SACE,eAACkD,GAAA,EAAD,CAAaJ,KAAK,QAAQvD,GAAI,CAAE4D,SAAU,IAA1C,UACE,eAACP,GAAA,EAAD,CAAYtJ,GAAG,YAAYiG,GAAI,CAAEN,SAAjC,yBAEG1I,KAEH,cAAC6M,GAAA,EAAD,CACEC,QAAQ,YACR/J,GAAG,kBACHjC,MAAOd,EACPoM,MAAM,cACNW,WAAS,EACTnD,QAAQ,SACRoC,SAAU,SAACC,GAAD,OAAOzL,EAAcsK,SAASmB,EAAEC,OAAOpL,MAAO,MACxDkI,GAAI,CAAEN,SARR,SAUG,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAIxD,KAAI,SAAC8H,GAAD,OAC5B,cAACC,GAAA,EAAD,CAAoBnM,MAAOkM,EAA3B,SACGA,GADYA,aAQvB,cAACvF,EAAA,EAAD,CAAKuB,GAAI,CAAES,MAAO,IAAlB,SACE,eAACkD,GAAA,EAAD,CAAaJ,KAAK,QAAQvD,GAAI,CAAE4D,SAAU,IAA1C,UACE,cAACP,GAAA,EAAD,CAAYtJ,GAAG,aAAaiG,GAAI,CAAEN,SAAlC,wBAGA,cAACmE,GAAA,EAAD,CACEC,QAAQ,aACR/J,GAAG,mBACHjC,MAAOuE,EACPzC,aAAa,QACbwJ,MAAM,aACNW,WAAS,EACTnD,QAAQ,SACRoC,SAAU,SAACC,GAAD,OAAOhL,EAAcgL,EAAEC,OAAOpL,QACxCkI,GAAI,CAAEN,SATR,SAWG/J,EAAYuG,KAAI,SAACgI,GAAD,OACf,cAACD,GAAA,EAAD,CAAUnM,MAAOoM,EAAjB,SACGA,GADmCA,mBASlD,cAAC/B,GAAA,EAAD,CAAOG,QAAS,IAAhB,SACGf,EAAgBrF,KAAI,SAACR,EAAMkG,GAAP,OACnB,eAACO,GAAA,EAAD,CACE1B,MAAM,cACN6B,QAAS,IACTF,UAAU,MACVtC,WAAW,SAEXE,GAAI,CACFmE,YAAa,EACbC,YAAa,QACbvD,YAAa,cACbwD,aAAc,GACd,UAAW,CACTxD,YAAanB,EACb4E,WAAY,UAblB,UAiBE,cAAC7F,EAAA,EAAD,CACE8F,OA1JK,GA2JL9D,MAAO,GACP3B,QAAQ,OACRgB,WAAW,SACXC,eAAe,SACfQ,WAAW,OACXb,MAAOA,EAPT,SASGhE,EAAKI,QAAQ,IAAK,QAnMVe,EAqME7F,EArMSwN,MAAMC,KAAKD,MAAM3H,KAqMdX,KAAI,SAACwI,EAAGC,GAC/B,IAAM5K,EAAE,UAAM6H,GAAN,OAAiBnM,GAAjB,OAA6BkP,GAC/BC,EAAUxD,EAAgBrH,GAChC,OACE,cAAC,IAAM8K,SAAP,UACE,cAACpG,EAAA,EAAD,CACEgC,MA1KD,GA2KC8D,OA3KD,GA4KCF,aAAc,GACdrE,GAAI,CACF0C,gBAAiB,eACjB,UAAW,CACTA,gBAAiB,eACjBoC,QAAS,CAAC,GAAK,GAAK,MAGxBnG,QAAS,kBArSLoG,EAqSwBhL,OApSvCmH,EAAUlH,SAAS+K,IAOtBlN,EAAaqJ,EAAUzD,QAAO,SAACuH,GAAD,OAAWA,IAAUD,MACnD/M,EAAmBiN,KAAK7D,EAAiB,CAAC2D,OAP1ClN,EAAa,GAAD,mBAAKqJ,GAAL,CAAgB6D,KAC5B/M,EAAmB,2BACdoJ,GADa,kBAEf2D,EAAOhI,WAAa,OALN,IAACgI,GA0RN,SAaG7D,EAAUlH,SAASD,IAAO6K,EACzB,cAAC,gBAAD,CACEL,OAxLL,GAyLK9D,MAzLL,GAyLYmE,EAAqC,GAAfA,EAAU,GACvCM,KAAK,IACLC,WAAY,CAAC,GAAI,IACjBC,aAAc,SAACC,EAAD,IA1RZ,SAAC5E,EAAOsE,GAC9B,MAAmBA,EAAO1J,MAAM5F,GAAhC,mBAAO+G,EAAP,KAAYC,EAAZ,KAGA,GAAIyE,EAAUlH,SAAV,UAAsBwC,GAAtB,OAA4B/G,GAA5B,OAAwCqM,SAASrF,EAAK,IAAM,IAC9DiF,QADF,CAKA,IAIM4D,EAJW9M,KAAKC,MAAMgI,EAAQ,KAClBA,EAAQ,GAGkB,EAAI,EAAI,GAM9C8E,EAAezD,SAASrF,EAAK,IAAM6I,EAAc,EAElC,CACnBpE,EAAUlH,SAASuL,GACnBA,EAAevO,GAIFwO,KAAKC,SAElB/D,IAIF1J,EAAmB,2BACdoJ,GADa,kBAEf2D,EAASO,MAwPUI,CADiC,EAAXnC,KACD9C,MAAO1G,IANhC,SASE,cAAC0E,EAAA,EAAD,CACEmB,QAASF,EACT6E,OAAO,OACP9D,MAAM,OACN4D,aAAc,OAGhB,QA/BR,cAA4BM,SAhClC,cAKc/C,IA9KF,IAAC/E,MAuKUa,OAoFjCqD,GAASD,aAAe,CACtBjC,WAAY,SACZoC,UAAW,WAGEF,UCpYA4E,GA7BG,SAAC,GAAqB,IAAnBhO,EAAkB,EAAlBA,YACnB,EAEI2G,IADF9E,EADF,EACEA,gBAAiBH,EADnB,EACmBA,aAAcC,EADjC,EACiCA,eAAgBC,EADjD,EACiDA,cAAeG,EADhE,EACgEA,gBAE1DmF,EAAatJ,EAAaoC,GAEhC,OACE,eAAC8G,EAAA,EAAD,WACE,cAAC,EAAD,CACEM,SAAUvF,EACVqF,WAAYA,EACZxF,aAAcA,EACdyF,QAASxF,EACT0F,MAAOzF,IAET,cAAC,GAAD,CACEsF,WAAYA,EACZoC,UAAS,gBAAWtJ,GACpBA,YAAaA,EACbqJ,OAAQtH,QCbDkM,GAVG,SAAC,GAAD,IAAGjO,EAAH,EAAGA,YAAH,OAChB,cAAC8G,EAAA,EAAD,CAAKmB,QAAQ,aAAad,QAAQ,OAAOgB,WAAW,SAASC,eAAe,SAASwE,OAAO,QAA5F,SACE,cAAC,GAAD,CAAW5M,YAAaA,OCQbkO,GATA,kBACb,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,MACxBzQ,EAAO4G,KAAI,SAACvE,GAAD,OACV,cAAC,IAAD,CAAOmO,KAAI,gBAAWnO,GAA4CoO,QAAS,cAAC,GAAD,CAAWpO,YAAaA,KAAnG,gBAAmDA,WCsB1CqO,OAtBf,WACE,IAAMC,EAAQC,YAAY,CACxBC,QAAS,CACPC,QAAQ,eACHzR,MAKT,OACE,qBAAK0R,UAAU,MAAf,SACE,cAACC,EAAA,EAAD,CAAeL,MAAOA,EAAtB,SACE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,GAAD,aCbZM,IAASC,OACP,cAAC,IAAD,CAAeC,SAAS,aAAxB,SACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.906ff35a.chunk.js","sourcesContent":["export const Colors = {\n  main: '#646464',\n  secondary: '#fff',\n  bg: '#3E3C3C',\n  dark: '#525151',\n  light: '#706c6c',\n  red: '#ea9191',\n  yellow: '#E3EA91',\n  blue: '#91b9ea',\n  green: '#91eabb',\n  white: '#ccc',\n};\n\nexport const TRACKS = [1, 2, 3, 4, 5];\n\nexport const TRACK_COLORS = {\n  1: 'red',\n  2: 'yellow',\n  3: 'blue',\n  4: 'green',\n  5: 'white',\n};\n\nconst BASE_NOTES = [\n  'B',\n  'A#',\n  'A',\n  'G#',\n  'G',\n  'F#',\n  'F',\n  'E',\n  'D#',\n  'D',\n  'C#',\n  'C',\n];\nconst NOTES = ['C', ...BASE_NOTES, ...BASE_NOTES];\nconst DELIMITER = '__';\nconst GRID_ROWS = 2 * BASE_NOTES.length + 1;\nconst GRID_COLS = 48;\nconst NOTATIONS = ['1n', '2n', '4n', '8n'];\nconst NOTATION_VALUES = {\n  '1n': 8,\n  '2n': 4,\n  '4n': 2,\n  '8n': 1,\n};\nconst INSTRUMENTS = [\n  'bass-electric',\n  'cello',\n  /**\n   * Disabling as I have no idea how the notes are ordered for clarinet\n   */\n  // 'clarinet',\n  'flute',\n  'guitar-acoustic',\n  'guitar-electric',\n  /**\n   * Same problem as above\n   */\n  // 'harp',\n  'piano',\n  'saxophone',\n  'violin',\n];\n\nconst INSTRUMENT_NOTES = {\n  'bass-electric': [\n    'As5',\n    'G5',\n    'E5',\n    'Cs5',\n    'As4',\n    'G4',\n    'E4',\n    'Cs4',\n    'As3',\n    'G3',\n    'E3',\n    'Cs3',\n    'As2',\n    'G2',\n    'E2',\n    'Cs2',\n  ],\n  cello: [\n    'B4',\n    'As4',\n    'A4',\n    'Gs4',\n    'G4',\n    'Fs4',\n    'F4',\n    'E4',\n    'Ds4',\n    'D4',\n    'Cs4',\n    'C4',\n    'B3',\n    'As3',\n    'A3',\n    'Gs3',\n    'G3',\n    'Fs3',\n    'F3',\n    'E3',\n    'Ds3',\n    'D3',\n    'Cs3',\n    'C3',\n  ],\n  /**\n   * Skipping\n   */\n  clarinet: [\n    'F2',\n    'D3',\n    'F3',\n    'D4',\n    'D5',\n    'F4',\n    'Fs5',\n    'As2',\n    'As3',\n    'As4',\n    'D2',\n  ],\n  flute: [\n    'C6',\n    'A5',\n    'E5',\n    'C5',\n    'A4',\n    'E4',\n    'C4',\n    'A3',\n    'E3',\n    'C3',\n  ],\n  'guitar-acoustic': [\n    'B3',\n    'As3',\n    'A3',\n    'Gs3',\n    'G3',\n    'Fs3',\n    'F3',\n    'E3',\n    'Ds3',\n    'D3',\n    'Cs3',\n    'C3',\n    'B2',\n    'As2',\n    'A2',\n    'Gs2',\n    'G2',\n    'Fs2',\n    'F2',\n    'E2',\n    'Ds2',\n    'D2',\n    'Cs2',\n    'C2',\n  ],\n  'guitar-electric': [\n    'A5',\n    'Fs5',\n    'Ds5',\n    'C5',\n\n    'A4',\n    'Fs4',\n    'Ds4',\n    'C4',\n\n    'A3',\n    'Fs3',\n    'Ds3',\n    'C3',\n\n    // 'Fs2',\n    // 'A2',\n    // 'C6',\n    // 'Cs2',\n  ],\n  /**\n   * Disabling\n   */\n  harp: [\n    'B3',\n    'C5',\n    'D2',\n    'D4',\n    'D6',\n    'D7',\n    'E1',\n    'E3',\n    'E5',\n    'F2',\n    'F4',\n    'F6',\n    'F7',\n    'G1',\n    'G3',\n    'G5',\n    'A2',\n    'A4',\n    'A6',\n    'B1',\n    'B5',\n    'B6',\n    'C3',\n  ],\n  piano: [\n    'C5',\n\n    'B4',\n    'As4',\n    'A4',\n    'Gs4',\n    'G4',\n    'Fs4',\n    'F4',\n    'E4',\n    'Ds4',\n    'D4',\n    'Cs4',\n    'C4',\n\n    'B3',\n    'As3',\n    'A3',\n    'Gs3',\n    'G3',\n    'Fs3',\n    'F3',\n    'E3',\n    'Ds3',\n    'D3',\n    'Cs3',\n    'C3',\n  ],\n  saxophone: [\n    'B3',\n    'As3',\n    'A3',\n    'Gs3',\n    'G3',\n    'Fs3',\n    'F3',\n    'E3',\n    'Ds3',\n    'D3',\n    'Cs3',\n    'C3',\n\n    // 'B2',\n    // 'As2',\n\n    // 'E2',\n    // 'Ds4',\n    // 'E4',\n    // 'F2',\n    // 'F4',\n    // 'Fs2',\n    // 'Fs4',\n    // 'G2',\n    // 'G4',\n    // 'Gs2',\n    // 'Gs4',\n    // 'A4',\n    // 'C4',\n    // 'Cs2',\n    // 'Cs4',\n    // 'D2',\n    // 'D4',\n    // 'Ds2',\n  ],\n  violin: [\n    'C6',\n\n    'A5',\n    'G5',\n    'E5',\n    'C5',\n\n    'A4',\n    'G4',\n    'E4',\n    'C4',\n  ],\n};\n\nexport {\n  NOTES,\n  DELIMITER,\n  GRID_COLS,\n  GRID_ROWS,\n  NOTATIONS,\n  NOTATION_VALUES,\n  BASE_NOTES,\n  INSTRUMENTS,\n  INSTRUMENT_NOTES,\n};\n","import React, {\n  createContext, useContext, useState, useCallback,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { TRACKS } from '../const';\n\nconst activeBoxesDefault = TRACKS.reduce((a, b) => ({ ...a, [b]: [] }), {});\nconst activeBoxesValuesDefault = TRACKS.reduce((a, b) => ({ ...a, [b]: {} }), {});\nconst instrumentsDefault = TRACKS.reduce((a, b) => ({ ...a, [b]: 'piano' }), {});\n\nconst TracksContext = createContext({\n  activeBoxes: activeBoxesDefault,\n  activeBoxesValues: activeBoxesValuesDefault,\n  instruments: instrumentsDefault,\n  tempo: 120,\n  gridLength: 40,\n});\n\nexport const TracksProvider = ({ children }) => {\n  const [activeBoxes, setActiveBoxes] = useState(activeBoxesDefault);\n  const [activeBoxesValues, setActiveBoxesValues] = useState(activeBoxesValuesDefault);\n  const [instruments, setInstruments] = useState(instrumentsDefault);\n\n  const [tempo, setTempo] = useState(120);\n  const [gridLength, setGridLength] = useState(40);\n\n  const getSetter = useCallback((trackNumber) => {\n    if (TRACKS.indexOf(trackNumber) !== -1) {\n      const setActiveBox = (value) => {\n        setActiveBoxes((prev) => ({\n          ...prev,\n          [trackNumber]: value,\n        }));\n      };\n\n      const setActiveBoxValues = (value) => {\n        setActiveBoxesValues((prev) => ({\n          ...prev,\n          [trackNumber]: value,\n        }));\n      };\n\n      const setInstrument = (value) => {\n        setInstruments((prev) => ({\n          ...prev,\n          [trackNumber]: value,\n        }));\n      };\n\n      return {\n        setActiveBox,\n        setActiveBoxValues,\n        setInstrument,\n        setTempo,\n        setGridLength,\n      };\n    }\n\n    return {\n      setActiveBox: () => {},\n      setActiveBoxValues: () => {},\n      setInstrument: () => {},\n    };\n  }, []);\n\n  return (\n    <TracksContext.Provider value={{\n      getSetter,\n      activeBoxes,\n      activeBoxesValues,\n      instruments,\n      tempo,\n      gridLength,\n    }}\n    >\n      {children}\n    </TracksContext.Provider>\n  );\n};\n\nTracksProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\n/**\n *\n */\nexport const useTracks = () => useContext(TracksContext);\n","/* eslint-disable prefer-template */\n\nimport React, {\n  createContext, useState, useEffect, useContext,\n} from 'react';\nimport * as Tone from 'tone';\nimport groupBy from 'lodash.groupby';\nimport PropTypes from 'prop-types';\n\nimport {\n  DELIMITER, INSTRUMENT_NOTES, NOTATION_VALUES, TRACKS,\n} from '../const';\nimport { useTracks } from './useTracks';\n\n/**\n * Divide a number to its floored value (whole number division) and its rest.\n * @param {number} num Number to be divided.\n * @param {number} divider Divider of the number\n * @returns {[number, number]} result of the division and the rest of the division\n */\nconst divide = (num, divider) => [Math.floor(num / divider), num % divider];\n\n/**\n * Function to create a Tone.js compliant time object from a duration.\n * @param {number} duration Duration of the time in grid units.\n * @returns {Object} Tone.js compliant time object.\n */\nconst createTimeObject = (duration) => {\n  // note: Assuming that every grid unit -> 8n or 1/8 note\n  const [nValue, nRest] = divide(duration, NOTATION_VALUES['1n']);\n  const [halfNValue, halfNRest] = divide(nRest, NOTATION_VALUES['2n']);\n  const [quarterNValue, quarterNRest] = divide(\n    halfNRest,\n    NOTATION_VALUES['4n'],\n  );\n  const [eighthNValue] = divide(quarterNRest, NOTATION_VALUES['8n']);\n\n  return {\n    '1n': nValue,\n    '2n': halfNValue,\n    '4n': quarterNValue,\n    '8n': eighthNValue,\n  };\n};\n\nconst toSeconds = (duration) => Tone.Transport.toSeconds(duration);\n\nexport const PlayerContext = createContext({\n  playDuration: 0,\n  displayOverlay: false,\n  resetProgress: false,\n  cancelPlayAudio: () => {},\n  play: () => {},\n  playSingleAudio: () => {},\n  playMultipleAudio: () => {},\n});\n\nconst defaultValue = TRACKS.reduce((a, b) => ({ ...a, [b]: null }), {});\nconst notReady = TRACKS.reduce((a, b) => ({ ...a, [b]: false }), {});\n\nconst isPlayingMultipleTracks = (id) => typeof id === 'string' && id.includes(DELIMITER);\nconst INACTIVE = '';\n\nexport const PlayerProvider = ({ children }) => {\n  const {\n    tempo, gridLength, activeBoxes, activeBoxesValues, instruments,\n  } = useTracks();\n\n  const [playerId, setPlayerId] = useState(INACTIVE);\n  const [playerGroup, setPlayerGroup] = useState(defaultValue);\n  const [readyState, setReadyState] = useState(notReady);\n  const [noteEntryGroup, setNoteEntryGroup] = useState(defaultValue);\n\n  const [playDuration, setPlayDuration] = useState(0);\n  const [displayOverlay, setDisplayOverlay] = useState(false);\n  const [timeoutId, setTimeoutId] = useState(-1);\n  const [resetProgress, setResetProgress] = useState(false);\n  const [playWithLoop, setPlayWithLoop] = useState(false);\n\n  const onBeforeStop = () => {\n    setDisplayOverlay(false);\n    setPlayDuration(0);\n    Tone.Transport.cancel(playDuration / 1000);\n  };\n\n  const stopAudio = (p) => {\n    if (playDuration > 0) {\n      onBeforeStop();\n      if (p && !isPlayingMultipleTracks(playerId)) {\n        p.dispose();\n\n        setPlayerGroup((prev) => ({ ...prev, [playerId]: null }));\n        setReadyState((prev) => ({ ...prev, [playerId]: false }));\n      } else {\n        const ids = playerId.split(DELIMITER);\n        ids.forEach((id) => {\n          playerGroup[id].dispose();\n        });\n\n        setPlayerGroup(defaultValue);\n        setReadyState(notReady);\n      }\n\n      setPlayerId(INACTIVE);\n    }\n  };\n\n  const cancelPlayAudio = () => {\n    if (timeoutId !== -1) {\n      clearTimeout(timeoutId);\n      setTimeoutId(-1);\n    }\n\n    stopAudio(!isPlayingMultipleTracks(playerId) ? playerGroup[playerId] : null);\n  };\n\n  const replayAudio = (entries, p) => {\n    setResetProgress(true);\n    // eslint-disable-next-line no-use-before-define\n    playAudio(entries, p);\n  };\n\n  const playAudio = (entries, p) => {\n    setDisplayOverlay(true);\n    entries.forEach(({ note, noteDatas }) => {\n      noteDatas.forEach(({ duration, start }) => {\n        p.triggerAttackRelease(\n          note.replace('s', '#'),\n          duration,\n          '+' + toSeconds(start),\n        );\n      });\n    });\n\n    const timeout = setTimeout(() => {\n      if (playWithLoop) {\n        replayAudio(entries, p);\n      } else {\n        stopAudio(!isPlayingMultipleTracks(playerId) ? p : null);\n      }\n    }, playDuration + 500);\n\n    setTimeoutId(timeout);\n  };\n\n  const getNotes = (id) => activeBoxes[id].map(\n    (box) => `${box}${DELIMITER}${activeBoxesValues[id][box] ?? 0}`,\n  );\n\n  /**\n   * Function to play a grid item.\n   * @param {string[]} items\n   */\n  const play = async (id) => {\n    Tone.Transport.bpm.value = tempo;\n\n    const instrument = instruments[id];\n\n    const times = getNotes(id).map((item) => {\n      const [row, col, duration] = item.split(DELIMITER);\n      return {\n        row,\n        duration: createTimeObject(duration),\n        start: createTimeObject(col),\n      };\n    });\n\n    const entries = Object.entries(groupBy(times, (obj) => obj.row)).map(\n      ([row, noteDatas]) => {\n        /**\n         *\n         * @returns {string}\n         */\n        const getNote = () => INSTRUMENT_NOTES[instrument][row];\n\n        return {\n          note: getNote(),\n          noteDatas,\n        };\n      },\n    );\n\n    if (times.length > 0) {\n      const urls = entries.reduce(\n        (a, b) => ({\n          ...a,\n          [b.note.replace('s', '#').toString()]: b.note + '.mp3',\n        }),\n        {},\n      );\n\n      const sampler = new Tone.Sampler({\n        urls,\n        baseUrl:\n          'https://louisandrew.github.io/loop-maker/samples/'\n          + instrument\n          + '/',\n        onload: async () => {\n          // setNoteEntries(entries);\n          // setPlayer(sampler);\n\n          setNoteEntryGroup((prev) => ({\n            ...prev,\n            [id]: entries,\n          }));\n\n          setReadyState((prev) => ({\n            ...prev,\n            [id]: true,\n          }));\n\n          await Tone.start();\n        },\n      }).toDestination();\n      return sampler;\n    }\n\n    return null;\n  };\n\n  const playSingleAudio = async (id, withLoop) => {\n    const totalTrackDuration = toSeconds(createTimeObject(gridLength)) * 1000;\n    setPlayDuration(totalTrackDuration);\n    setPlayerId(id);\n    setPlayWithLoop(withLoop);\n\n    const singlePlayer = await play(id);\n\n    setPlayerGroup((prev) => ({\n      ...prev,\n      [id]: singlePlayer,\n    }));\n  };\n\n  const playMultipleAudio = async (withLoop) => {\n    const tracks = Object.keys(activeBoxesValues).filter(\n      (key) => Object.values(activeBoxesValues[key]).length > 0,\n    );\n    setPlayerId(tracks.length > 0 ? tracks.join(DELIMITER) : INACTIVE);\n\n    const totalTrackDuration = toSeconds(createTimeObject(gridLength)) * 1000;\n    setPlayDuration(totalTrackDuration);\n    setPlayWithLoop(withLoop);\n\n    const samplers = await Promise.all(\n      tracks.map(async (trackId) => ({ [trackId]: await play(trackId) })),\n    );\n\n    setPlayerGroup((prev) => ({\n      ...prev,\n      ...samplers.reduce((a, b) => ({ ...a, ...b }), {}),\n    }));\n  };\n\n  const checkIsReady = (id) => readyState[id] && playerGroup[id];\n\n  useEffect(() => {\n    if (resetProgress) {\n      setTimeout(() => {\n        setResetProgress(false);\n      }, 100);\n    }\n  }, [resetProgress]);\n\n  useEffect(() => {\n    if (!isPlayingMultipleTracks(playerId)) {\n      if (checkIsReady(playerId)) {\n        playAudio(noteEntryGroup[playerId], playerGroup[playerId]);\n      }\n    } else {\n      const ids = playerId.split(DELIMITER);\n      if (ids.every(checkIsReady)) {\n        ids.forEach((id) => {\n          playAudio(noteEntryGroup[id], playerGroup[id]);\n        });\n      }\n    }\n  }, [readyState, playerGroup]);\n\n  return (\n    <PlayerContext.Provider\n      value={{\n        displayOverlay,\n        playDuration,\n        resetProgress,\n        play,\n        cancelPlayAudio,\n        playSingleAudio,\n        playMultipleAudio,\n      }}\n    >\n      {children}\n    </PlayerContext.Provider>\n  );\n};\n\nPlayerProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport const usePlayer = () => useContext(PlayerContext);\n","import { Box, Button } from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\nimport { TRACKS } from '../../const';\nimport { usePlayer } from '../../hooks/usePlayer';\n\nconst Home = () => {\n  const { playMultipleAudio, displayOverlay, playSingleAudio} = usePlayer();\n\n  return (\n    <div>\n      <h1>Home View</h1>\n      {TRACKS.map((trackNumber) => (\n        <div>\n        <Link to={`track-${trackNumber}`} key={`track-${trackNumber}-link`}>\n          <Box>\n            Go to track\n            {' '}\n            {trackNumber}\n          </Box>\n\n        </Link>\n\n        <Button onClick={() => playSingleAudio(trackNumber, false)}>\n          play track\n        </Button>\n        </div>\n      ))}\n\n      {displayOverlay && (\n        <Box>\n          Displaying overlay\n        </Box>\n      )}\n\n      <Button onClick={playMultipleAudio}>\n        Multiple audio\n      </Button>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Box, LinearProgress, Button } from '@mui/material';\nimport PropTypes from 'prop-types';\n\n/**\n * Component that overlays the grid item when it's playing\n */\nconst GridOverlay = ({\n  playDuration, trackColor, display, onCancel, reset,\n}) => {\n  const [progressKey, setProgressKey] = useState(Math.random());\n  const [progress, setProgress] = useState(0);\n  const isActive = playDuration !== 0 && display;\n\n  /**\n   * Function to reset the current progress bar\n   */\n  const resetProgress = () => {\n    setProgress(0);\n    setProgressKey(Math.random());\n  };\n\n  /**\n   * Will be called everytime the variable `playDuration` changes.\n   * What it does: Sets an interval to update the \"playing audio\" progress bar.\n   */\n  useEffect(() => {\n    let timer;\n\n    if (reset) {\n      resetProgress();\n    }\n\n    if (playDuration > 0) {\n      timer = setInterval(() => {\n        setProgress((prev) => (prev === 100 ? prev : prev + 1));\n      }, playDuration / 100);\n    } else {\n      resetProgress();\n    }\n\n    /**\n     * Cleanup function to clear the interval.\n     */\n    return () => {\n      if (timer) {\n        resetProgress();\n        clearInterval(timer);\n      }\n    };\n  }, [playDuration, display, reset]);\n\n  const color = `primary.${trackColor}`;\n\n  return isActive ? (\n    <Box\n      position=\"absolute\"\n      bgcolor=\"rgba(0, 0, 0, 0.1)\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      sx={{\n        backdropFilter: 'blur(1px)',\n        zIndex: 99,\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n      }}\n    >\n      <Box color=\"#fff\" fontWeight=\"bold\" fontSize=\"32px\">\n        PLAYING AUDIO\n      </Box>\n      <Box width=\"20vw\" color={color} sx={{ marginTop: 3 }}>\n        <LinearProgress\n          key={progressKey}\n          color=\"inherit\"\n          variant=\"determinate\"\n          value={progress}\n        />\n      </Box>\n      <Button onClick={onCancel} variant=\"outlined\" sx={{ color, borderColor: color, marginTop: 4 }}>\n        Cancel\n      </Button>\n    </Box>\n  ) : null;\n};\n\nGridOverlay.propTypes = {\n  trackColor: PropTypes.string,\n  playDuration: PropTypes.number.isRequired,\n  display: PropTypes.bool.isRequired,\n  onCancel: PropTypes.func,\n  reset: PropTypes.bool.isRequired,\n};\n\nGridOverlay.defaultProps = {\n  trackColor: 'yellow',\n  onCancel: () => {},\n};\n\nexport default GridOverlay;\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable react/no-array-index-key */\nimport React, {\n  useEffect, useRef, useState, useMemo,\n} from 'react';\nimport {\n  Stack,\n  Box,\n  Button,\n  FormControl,\n  FormControlLabel,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n  IconButton,\n  Checkbox,\n  Slider,\n  FormGroup,\n} from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport { Link } from 'react-router-dom';\nimport omit from 'lodash.omit';\nimport { ResizableBox } from 'react-resizable';\nimport PropTypes from 'prop-types';\nimport { DELIMITER, INSTRUMENTS, INSTRUMENT_NOTES } from '../../../const';\nimport { useTracks } from '../../../hooks/useTracks';\n\n/**\n * Grid item where user can clicks on the grid and assign an active note.\n * ![documentation](https://raw.githubusercontent.com/LouisAndrew/loop-maker/docs/docs/images/GridItem.jpeg)\n */\nconst GridItem = ({\n  trackColor = 'yellow',\n  onPlay,\n  trackName = 'Track 1',\n  trackNumber,\n}) => {\n  const {\n    getSetter, activeBoxes, activeBoxesValues, instruments, gridLength, tempo,\n  } = useTracks();\n\n  const activeBox = useMemo(() => activeBoxes[trackNumber], [activeBoxes]);\n  const activeBoxValues = useMemo(\n    () => activeBoxesValues[trackNumber],\n    [activeBoxesValues],\n  );\n  const instrument = useMemo(() => instruments[trackNumber], [instruments]);\n\n  const {\n    setActiveBox, setActiveBoxValues, setInstrument, setTempo, setGridLength,\n  } = useMemo(\n    () => getSetter(trackNumber),\n    [trackNumber],\n  );\n\n  const [withLoop, setWithLoop] = useState(false);\n\n  function handleTempo(_, newValue) {\n    setTempo(newValue);\n  }\n\n  /**\n   * Key of the whole component (Used to rerender the grids).\n   * @type {[string]}\n   */\n  const [key, setKey] = useState(Math.random());\n\n  /**\n   * @type {string[]}\n   */\n  const instrumentNotes = useMemo(\n    () => INSTRUMENT_NOTES[instrument],\n    [instrument],\n  );\n\n  /**\n   * Sets whether the component is done being rendered for the first time.\n   */\n  const firstRender = useRef(true);\n\n  /**\n   * Function to rerender the whole component.\n   */\n  const rerender = () => setKey(Math.random());\n\n  /**\n   * Function to toggle active state of a box (e.g. 1__2).\n   * @param {string} itemId\n   */\n  const toggleActive = (itemId) => {\n    if (!activeBox.includes(itemId)) {\n      setActiveBox([...activeBox, itemId]);\n      setActiveBoxValues({\n        ...activeBoxValues,\n        [itemId.toString()]: 1,\n      });\n    } else {\n      setActiveBox(activeBox.filter((boxId) => boxId !== itemId));\n      setActiveBoxValues(omit(activeBoxValues, [itemId]));\n    }\n  };\n\n  /**\n   * Function to handle resize action of a box. The function will be called **AFTER** the\n   * user stopped resizing the box.\n   * @param {number} width\n   * @param {string} itemId\n   */\n  const handleBoxResize = (width, itemId) => {\n    const [row, col] = itemId.split(DELIMITER);\n\n    // disable resize if the next column is filled\n    if (activeBox.includes(`${row}${DELIMITER}${parseInt(col, 10) + 1}`)) {\n      rerender();\n      return;\n    }\n\n    const quotient = Math.floor(width / 32); // Whole number division\n    const remainder = width % 32; // Rest of the division\n\n    // Resize value: Difference (in grids) of the active box before and after resize event\n    const resizeValue = quotient + (remainder > 0 ? 1 : 0);\n\n    /**\n     * Next position of the box\n     * @example {resizeValue: 3; itemId: 1__2} -> nextPosition = 1__5\n     */\n    const nextPosition = parseInt(col, 10) + resizeValue - 1;\n\n    const requirements = [\n      activeBox.includes(nextPosition),\n      nextPosition > gridLength,\n    ];\n\n    if (\n      requirements.some(Boolean) // returns true if all of the `requirements` array is truthy\n    ) {\n      rerender();\n      return;\n    }\n\n    setActiveBoxValues({\n      ...activeBoxValues,\n      [itemId]: resizeValue,\n    });\n  };\n\n  /**\n   * Play all of the active notes on the grid.\n   */\n  const handlePlay = () => {\n    onPlay(\n      trackNumber,\n      withLoop,\n    );\n  };\n\n  /**\n   * Clear all of the active box and its values.\n   */\n  const handleClear = () => {\n    setActiveBox([]);\n    setActiveBoxValues([]);\n  };\n\n  /**\n   * Helper function to initialize an array of length\n   * @param {number} length\n   */\n  const createArray = (length) => Array.from(Array(length));\n\n  const filterOldBoxes = (box) => {\n    const [rowIndex, colIndex] = box.split(DELIMITER);\n    return (\n      instrumentNotes.length > parseInt(rowIndex, 10) && colIndex < gridLength\n    );\n  };\n\n  useEffect(() => {\n    if (!firstRender.current) {\n      rerender();\n    } else {\n      firstRender.current = false;\n    }\n  }, [activeBox, activeBoxValues]);\n\n  useEffect(() => {\n    if (!firstRender.current) {\n      const newValue = activeBox.filter(filterOldBoxes);\n\n      const newBoxValue = Object.keys(activeBoxValues).filter(filterOldBoxes);\n\n      setActiveBox(newValue);\n      setActiveBoxValues(\n        newBoxValue\n          .map((k) => ({ [k]: activeBoxValues[k] }))\n          .reduce((a, b) => ({ ...a, ...b }), {}),\n      );\n    }\n  }, [instrumentNotes, gridLength]);\n\n  const color = `primary.${trackColor}`;\n  const BOX_SIZE = 24;\n\n  return (\n    <Stack>\n      <Stack\n        direction=\"row\"\n        alignItems=\"flex-end\"\n        paddingBottom={2}\n        spacing={5}\n      >\n        <Stack\n          direction=\"row\"\n          alignItems=\"center\"\n          justifyContent=\"flex-start\"\n          spacing={3}\n        >\n          <Link to=\"/\">\n            <IconButton aria-label=\"back\" sx={{ color }}>\n              <ArrowBackIcon />\n            </IconButton>\n          </Link>\n          <Typography\n            color={color}\n            variant=\"h5\"\n            fontWeight=\"bold\"\n            sx={{ marginLeft: '14px' }}\n          >\n            {trackName}\n          </Typography>\n          <Button\n            onClick={handlePlay}\n            sx={{\n              backgroundColor: color,\n              marginLeft: '28px',\n              marginRight: '14px',\n              '&:hover': { backgroundColor: color },\n            }}\n          >\n            Play\n          </Button>\n          <Button\n            onClick={handleClear}\n            variant=\"outlined\"\n            sx={{ color, borderColor: color }}\n          >\n            Clear\n          </Button>\n          <FormGroup>\n            <FormControlLabel\n              control={(\n                <Checkbox\n                  onChange={(e) => {\n                    setWithLoop(e.target.checked);\n                  }}\n                  sx={{\n                    color,\n                    '&.Mui-checked': {\n                      color,\n                    },\n                  }}\n                />\n            )}\n              sx={{ color }}\n              label=\"Loop\"\n            />\n          </FormGroup>\n        </Stack>\n        <Stack direction=\"row\" alignItems=\"flex-end\" spacing={1}>\n          <Box sx={{ width: 120 }}>\n            <InputLabel id=\"tempo\" sx={{ color }}>\n              Tempo:\n              {' '}\n              {tempo}\n            </InputLabel>\n            <Slider\n              size=\"small\"\n              value={tempo}\n              id=\"tempo\"\n              max={180}\n              min={80}\n              onChange={handleTempo}\n            />\n          </Box>\n          <Box sx={{ width: 80 }}>\n            <FormControl size=\"small\" sx={{ minWidth: 80 }}>\n              <InputLabel id=\"grid-size\" sx={{ color }}>\n                Grid length:\n                {gridLength}\n              </InputLabel>\n              <Select\n                labelId=\"grid-size\"\n                id=\"grid-size-input\"\n                value={gridLength}\n                label=\"Grid length\"\n                autoWidth\n                variant=\"filled\"\n                onChange={(e) => setGridLength(parseInt(e.target.value, 10))}\n                sx={{ color }}\n              >\n                {[32, 36, 40, 44, 48, 52].map((len) => (\n                  <MenuItem key={len} value={len}>\n                    {len}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Box>\n\n          <Box sx={{ width: 64 }}>\n            <FormControl size=\"small\" sx={{ minWidth: 80 }}>\n              <InputLabel id=\"instrument\" sx={{ color }}>\n                Instrument\n              </InputLabel>\n              <Select\n                labelId=\"instrument\"\n                id=\"instrument-input\"\n                value={instrument}\n                defaultValue=\"piano\"\n                label=\"Instrument\"\n                autoWidth\n                variant=\"filled\"\n                onChange={(e) => setInstrument(e.target.value)}\n                sx={{ color }}\n              >\n                {INSTRUMENTS.map((instrumentData) => (\n                  <MenuItem value={instrumentData} key={instrumentData}>\n                    {instrumentData}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Box>\n        </Stack>\n      </Stack>\n      <Stack spacing={0.25} key={key}>\n        {instrumentNotes.map((note, rowIndex) => (\n          <Stack\n            width=\"fit-content\"\n            spacing={0.25}\n            direction=\"row\"\n            alignItems=\"center\"\n            key={`row-${rowIndex}`}\n            sx={{\n              borderWidth: 1,\n              borderStyle: 'solid',\n              borderColor: 'transparent',\n              borderRadius: 0.5,\n              '&:hover': {\n                borderColor: color,\n                transition: '200ms',\n              },\n            }}\n          >\n            <Box\n              height={BOX_SIZE}\n              width={50}\n              display=\"flex\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              fontWeight=\"bold\"\n              color={color}\n            >\n              {note.replace('s', '#')}\n            </Box>\n            {createArray(gridLength).map((s, columnIndex) => {\n              const id = `${rowIndex}${DELIMITER}${columnIndex}`;\n              const idValue = activeBoxValues[id];\n              return (\n                <React.Fragment key={`col-${columnIndex}`}>\n                  <Box\n                    width={BOX_SIZE}\n                    height={BOX_SIZE}\n                    borderRadius={0.5}\n                    sx={{\n                      backgroundColor: 'primary.dark',\n                      '&:hover': {\n                        backgroundColor: 'primary.main',\n                        opacity: [0.9, 0.8, 0.7],\n                      },\n                    }}\n                    onClick={() => toggleActive(id)}\n                  >\n                    {activeBox.includes(id) && idValue ? (\n                      <ResizableBox\n                        height={BOX_SIZE}\n                        width={idValue * BOX_SIZE + (idValue - 1) * 2}\n                        axis=\"x\"\n                        handleSize={[10, 10]}\n                        onResizeStop={(event, { size }) => {\n                          handleBoxResize(size.width, id);\n                        }}\n                      >\n                        <Box\n                          bgcolor={color}\n                          height=\"100%\"\n                          width=\"100%\"\n                          borderRadius={0.5}\n                        />\n                      </ResizableBox>\n                    ) : null}\n                  </Box>\n                </React.Fragment>\n              );\n            })}\n          </Stack>\n        ))}\n      </Stack>\n    </Stack>\n  );\n};\n\nGridItem.propTypes = {\n  trackNumber: PropTypes.number.isRequired,\n  trackColor: PropTypes.string,\n  onPlay: PropTypes.func.isRequired,\n  trackName: PropTypes.string,\n};\n\nGridItem.defaultProps = {\n  trackColor: 'yellow',\n  trackName: 'Track 1',\n};\n\nexport default GridItem;\n","import React from 'react';\nimport { Box } from '@mui/material';\n\nimport PropTypes from 'prop-types';\nimport GridOverlay from './Grid/GridOverlay';\nimport GridItem from './Grid/GridItem';\nimport { TRACK_COLORS } from '../../const';\nimport { usePlayer } from '../../hooks/usePlayer';\n\nconst TrackGrid = ({ trackNumber }) => {\n  const {\n    cancelPlayAudio, playDuration, displayOverlay, resetProgress, playSingleAudio,\n  } = usePlayer();\n  const trackColor = TRACK_COLORS[trackNumber];\n\n  return (\n    <Box>\n      <GridOverlay\n        onCancel={cancelPlayAudio}\n        trackColor={trackColor}\n        playDuration={playDuration}\n        display={displayOverlay}\n        reset={resetProgress}\n      />\n      <GridItem\n        trackColor={trackColor}\n        trackName={`Track ${trackNumber}`}\n        trackNumber={trackNumber}\n        onPlay={playSingleAudio}\n      />\n    </Box>\n  );\n};\n\nTrackGrid.propTypes = {\n  trackNumber: PropTypes.number.isRequired,\n};\n\nexport default TrackGrid;\n","import React from 'react';\nimport { Box } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport TrackGrid from '../TrackItem/TrackGrid';\n\nconst TrackView = ({ trackNumber }) => (\n  <Box bgcolor=\"primary.bg\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height=\"100vh\">\n    <TrackGrid trackNumber={trackNumber} />\n  </Box>\n);\n\nTrackView.propTypes = {\n  trackNumber: PropTypes.number.isRequired,\n};\n\nexport default TrackView;\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { TRACKS } from '../../const';\nimport Home from './Home';\nimport TrackView from './TrackView';\n\nconst Router = () => (\n  <Routes>\n    <Route path=\"/\" element={<Home />} />\n    {TRACKS.map((trackNumber) => (\n      <Route path={`track-${trackNumber}`} key={`track-${trackNumber}`} element={<TrackView trackNumber={trackNumber} />} />\n    ))}\n  </Routes>\n);\n\nexport default Router;\n","import React from 'react';\nimport { createTheme, ThemeProvider } from '@mui/material';\n\nimport { Colors } from './const';\n\nimport './App.css';\nimport Router from './components/Views/Router';\nimport { TracksProvider } from './hooks/useTracks';\nimport { PlayerProvider } from './hooks/usePlayer';\n\nfunction App() {\n  const theme = createTheme({\n    palette: {\n      primary: {\n        ...Colors,\n      },\n    },\n  });\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <TracksProvider>\n          <PlayerProvider>\n            <Router />\n          </PlayerProvider>\n        </TracksProvider>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// eslint-disable-file\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\nimport 'react-resizable/css/styles.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter basename=\"loop-maker\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}