{"version":3,"sources":["const.js","components/Views/Home.jsx","components/TrackItem/Grid/const.js","components/TrackItem/Grid/GridOverlay.jsx","hooks/useTracks.jsx","components/TrackItem/Grid/GridItem.jsx","components/TrackItem/TrackGrid.jsx","components/Views/TrackView.jsx","components/Views/Router.jsx","App.jsx","index.jsx"],"names":["Colors","main","secondary","bg","dark","light","red","yellow","blue","green","white","TRACKS","TRACK_COLORS","Home","map","trackNumber","to","Box","BASE_NOTES","DELIMITER","NOTATION_VALUES","INSTRUMENTS","INSTRUMENT_NOTES","cello","clarinet","flute","harp","piano","saxophone","violin","GridOverlay","playDuration","trackColor","useState","Math","random","progressKey","setProgressKey","progress","setProgress","isActive","resetProgress","useEffect","timer","setInterval","prev","clearInterval","position","bgcolor","display","flexDirection","alignItems","justifyContent","sx","backdropFilter","zIndex","top","left","right","bottom","color","fontWeight","fontSize","width","marginTop","LinearProgress","variant","value","defaultProps","activeBoxesDefault","reduce","a","b","activeBoxesValuesDefault","instrumentsDefault","TracksContext","createContext","activeBoxes","activeBoxesValues","instruments","TracksProvider","children","setActiveBoxes","setActiveBoxesValues","setInstruments","getSetter","useCallback","indexOf","setActiveBox","setActiveBoxValues","setInstrument","Provider","GridItem","onPlay","trackName","useContext","activeBox","useMemo","activeBoxValues","instrument","gridLength","setGridLength","tempo","setTempo","key","setKey","instrumentNotes","firstRender","useRef","rerender","filterOldBoxes","box","split","rowIndex","colIndex","length","parseInt","current","newValue","filter","newBoxValue","Object","keys","k","Stack","direction","paddingBottom","spacing","IconButton","Typography","marginLeft","Button","onClick","backgroundColor","marginRight","borderColor","InputLabel","id","Slider","size","max","min","onChange","_","FormControl","minWidth","Select","labelId","label","autoWidth","e","target","len","MenuItem","defaultValue","instrumentData","note","borderWidth","borderStyle","borderRadius","transition","height","replace","Array","from","s","columnIndex","idValue","Fragment","opacity","itemId","includes","boxId","omit","toString","axis","handleSize","onResizeStop","event","row","col","resizeValue","floor","nextPosition","some","Boolean","handleBoxResize","TrackGrid","setPlayDuration","divide","num","divider","createTimeObject","duration","nValue","nRest","halfNValue","halfNRest","quarterNValue","quarterNRest","toSeconds","Tone","play","items","bpm","times","item","start","noteEntries","entries","groupBy","obj","noteDatas","urls","player","baseUrl","onload","noteDurations","totalTrackDuration","sort","setTimeout","dispose","cancel","forEach","triggerAttackRelease","toDestination","TrackView","Router","path","element","App","theme","createTheme","palette","primary","className","ThemeProvider","ReactDOM","render","basename","document","getElementById"],"mappings":"yPAAaA,EAAS,CACpBC,KAAM,UACNC,UAAW,OACXC,GAAI,UACJC,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,OAAQ,UACRC,KAAM,UACNC,MAAO,UACPC,MAAO,QAGIC,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,GAEtBC,EAAe,CAC1B,EAAG,MACH,EAAG,SACH,EAAG,OACH,EAAG,QACH,EAAG,S,iCCCUC,EAhBF,kBACX,gCACE,2CACCF,EAAOG,KAAI,SAACC,GAAD,OACV,cAAC,IAAD,CAAMC,GAAE,gBAAWD,GAAnB,SACE,eAACE,EAAA,EAAD,yBAEG,IACAF,MAJL,gBAAgDA,EAAhD,iB,uECTAG,EAAa,CACjB,IACA,KACA,IACA,KACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,KAGIC,GADK,CAAI,KAAJ,OAAYD,EAAeA,GACpB,MAIZE,EACE,EADFA,EAEE,EAFFA,EAGE,EAHFA,EAIE,EAEFC,EAAc,CAClB,gBACA,QAKA,QACA,kBACA,kBAKA,QACA,YACA,UAGIC,EAAmB,CACvB,gBAAiB,CACf,MACA,KACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,KACA,OAEFC,MAAO,CACL,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,MAKFC,SAAU,CACR,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,MAEFC,MAAO,CACL,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,kBAAmB,CACjB,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,MAEF,kBAAmB,CACjB,KACA,MACA,MACA,KAEA,KACA,MACA,MACA,KAEA,KACA,MACA,MACA,MAUFC,KAAM,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEFC,MAAO,CACL,KAEA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KAEA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,MAEFC,UAAW,CACT,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,MAwBFC,OAAQ,CACN,KAEA,KACA,KACA,KACA,KAEA,KACA,KACA,KACA,O,SCrQEC,EAAc,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,WACnC,EAAsCC,mBAASC,KAAKC,UAApD,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAgCJ,mBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACMC,EAA4B,IAAjBT,EAKXU,EAAgB,WACpBF,EAAY,GACZF,EAAeH,KAAKC,WA6BtB,OAtBAO,qBAAU,WACR,IAAIC,EAaJ,OAXIZ,EAAe,EACjBY,EAAQC,aAAY,WAClBL,GAAY,SAACM,GAAD,OAAoB,MAATA,EAAeA,EAAOA,EAAO,OACnDd,EAAe,KAElBU,IAMK,WACDE,IACFF,IACAK,cAAcH,OAGjB,CAACZ,IAEGS,EACL,eAACvB,EAAA,EAAD,CACE8B,SAAS,WACTC,QAAQ,qBACRC,QAAQ,OACRC,cAAc,SACdC,WAAW,SACXC,eAAe,SACfC,GAAI,CACFC,eAAgB,YAChBC,OAAQ,GACRC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,GAbZ,UAgBE,cAAC1C,EAAA,EAAD,CAAK2C,MAAM,OAAOC,WAAW,OAAOC,SAAS,OAA7C,2BAGA,cAAC7C,EAAA,EAAD,CAAK8C,MAAM,OAAOH,MAAK,kBAAa5B,GAAcqB,GAAI,CAAEW,UAAW,GAAnE,SACE,cAACC,EAAA,EAAD,CAEEL,MAAM,UACNM,QAAQ,cACRC,MAAO7B,GAHFF,QAOT,MAQNN,EAAYsC,aAAe,CACzBpC,WAAY,UAGCF,Q,4HCjFTuC,EAAqB1D,EAAO2D,QAAO,SAACC,EAAGC,GAAJ,mBAAC,eAAeD,GAAhB,kBAAoBC,EAAI,OAAO,IAClEC,EAA2B9D,EAAO2D,QAAO,SAACC,EAAGC,GAAJ,mBAAC,eAAeD,GAAhB,kBAAoBC,EAAI,OAAO,IACxEE,GAAqB/D,EAAO2D,QAAO,SAACC,EAAGC,GAAJ,mBAAC,eAAeD,GAAhB,kBAAoBC,EAAI,YAAY,IAEvEG,GAAgBC,wBAAc,CAClCC,YAAaR,EACbS,kBAAmBL,EACnBM,YAAaL,KAGFM,GAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC/B,EAAsChD,mBAASoC,GAA/C,mBAAOQ,EAAP,KAAoBK,EAApB,KACA,EAAkDjD,mBAASwC,GAA3D,mBAAOK,EAAP,KAA0BK,EAA1B,KACA,EAAsClD,mBAASyC,IAA/C,mBAAOK,EAAP,KAAoBK,EAApB,KAEMC,EAAYC,uBAAY,SAACvE,GAC7B,IAAqC,IAAjCJ,EAAO4E,QAAQxE,GAAqB,CAsBtC,MAAO,CACLyE,aAtBmB,SAACrB,GACpBe,GAAe,SAACrC,GAAD,mBAAC,eACXA,GADU,kBAEZ9B,EAAcoD,QAmBHsB,mBAfW,SAACtB,GAC1BgB,GAAqB,SAACtC,GAAD,mBAAC,eACjBA,GADgB,kBAElB9B,EAAcoD,QAYiBuB,cARd,SAACvB,GACrBiB,GAAe,SAACvC,GAAD,mBAAC,eACXA,GADU,kBAEZ9B,EAAcoD,SASrB,MAAO,CACLqB,aAAc,aACdC,mBAAoB,aACpBC,cAAe,gBAEhB,IAEH,OACE,cAACf,GAAcgB,SAAf,CAAwBxB,MAAO,CAC7BkB,YAAWR,cAAaC,oBAAmBC,eAD7C,SAIGE,KChCDW,GAAW,SAAC,GAKX,IAAD,IAJJ5D,kBAII,MAJS,SAIT,EAHJ6D,EAGI,EAHJA,OAGI,IAFJC,iBAEI,MAFQ,UAER,EADJ/E,EACI,EADJA,YAEA,EDsC6BgF,qBAAWpB,ICrCtCU,EADF,EACEA,UAAWR,EADb,EACaA,YAAaC,EAD1B,EAC0BA,kBAAmBC,EAD7C,EAC6CA,YAGvCiB,EAAYC,mBAAQ,kBAAMpB,EAAY9D,KAAc,CAAC8D,IACrDqB,EAAkBD,mBACtB,kBAAMnB,EAAkB/D,KACxB,CAAC+D,IAEGqB,EAAaF,mBAAQ,kBAAMlB,EAAYhE,KAAc,CAACgE,IAE5D,EAA4DkB,mBAC1D,kBAAMZ,EAAUtE,KAChB,CAACA,IAFKyE,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,mBAAoBC,EAA1C,EAA0CA,cAK1C,EAAoCzD,mBAAS,IAA7C,mBAAOmE,EAAP,KAAmBC,EAAnB,KACA,EAA0BpE,mBAAS,KAAnC,mBAAOqE,EAAP,KAAcC,EAAd,KAUA,MAAsBtE,mBAASC,KAAKC,UAApC,mBAAOqE,EAAP,KAAYC,GAAZ,KAKMC,GAAkBT,mBACtB,kBAAM3E,EAAiB6E,KACvB,CAACA,IAMGQ,GAAcC,kBAAO,GAKrBC,GAAW,kBAAMJ,GAAOvE,KAAKC,WAyF7B2E,GAAiB,SAACC,GACtB,MAA6BA,EAAIC,MAAM7F,GAAvC,mBAAO8F,EAAP,KAAiBC,EAAjB,KACA,OACER,GAAgBS,OAASC,SAASH,EAAU,KAAOC,EAAWd,GAIlE1D,qBAAU,WACHiE,GAAYU,QAGfV,GAAYU,SAAU,EAFtBR,OAID,CAACb,EAAWE,IAEfxD,qBAAU,WACR,IAAKiE,GAAYU,QAAS,CACxB,IAAMC,EAAWtB,EAAUuB,OAAOT,IAE5BU,EAAcC,OAAOC,KAAKxB,GAAiBqB,OAAOT,IAExDtB,EAAa8B,GACb7B,EACE+B,EACG1G,KAAI,SAAC6G,GAAD,sBAAWA,EAAIzB,EAAgByB,OACnCrD,QAAO,SAACC,EAAGC,GAAJ,mBAAC,eAAeD,GAAMC,KAAM,QAGzC,CAACkC,GAAiBN,IAErB,IAAMxC,GAAK,kBAAc5B,GAGzB,OACE,eAAC4F,EAAA,EAAD,WACE,eAACA,EAAA,EAAD,CACEC,UAAU,MACV1E,WAAW,WACX2E,cAAe,EACfC,QAAS,EAJX,UAME,eAACH,EAAA,EAAD,CACEC,UAAU,MACV1E,WAAW,SACXC,eAAe,aACf2E,QAAS,EAJX,UAME,cAAC,IAAD,CAAM/G,GAAG,IAAT,SACE,cAACgH,EAAA,EAAD,CAAY,aAAW,OAAO3E,GAAI,CAAEO,UAApC,SACE,cAAC,IAAD,QAGJ,cAACqE,EAAA,EAAD,CACErE,MAAOA,GACPM,QAAQ,KACRL,WAAW,OACXR,GAAI,CAAE6E,WAAY,QAJpB,SAMGpC,IAEH,cAACqC,EAAA,EAAD,CACEC,QAnFS,WACjBvC,EACEG,EAAUlF,KAAI,SAACiG,GAAD,sBAAYA,GAAZ,OAAkB5F,GAAlB,iBAA8B+E,EAAgBa,UAA9C,QAAsD,MACpEZ,EACAG,IAgFMjD,GAAI,CACFgF,gBAAiBzE,GACjBsE,WAAY,OACZI,YAAa,OACb,UAAW,CAAED,gBAAiBzE,KANlC,kBAWA,cAACuE,EAAA,EAAD,CACEC,QAnFU,WAClB5C,EAAa,IACbC,EAAmB,KAkFXvB,QAAQ,WACRb,GAAI,CAAEO,SAAO2E,YAAa3E,IAH5B,sBAQF,eAACgE,EAAA,EAAD,CAAOC,UAAU,MAAM1E,WAAW,WAAW4E,QAAS,EAAtD,UACE,eAAC9G,EAAA,EAAD,CAAKoC,GAAI,CAAEU,MAAO,KAAlB,UACE,eAACyE,EAAA,EAAD,CAAYC,GAAG,QAAQpF,GAAI,CAAEO,UAA7B,mBAEG,IACA0C,KAEH,cAACoC,EAAA,EAAD,CACEC,KAAK,QACLxE,MAAOmC,EACPmC,GAAG,QACHG,IAAK,IACLC,IAAK,GACLC,SA/MZ,SAAqBC,EAAGzB,GACtBf,EAASe,SAiNH,cAACrG,EAAA,EAAD,CAAKoC,GAAI,CAAEU,MAAO,IAAlB,SACE,eAACiF,EAAA,EAAD,CAAaL,KAAK,QAAQtF,GAAI,CAAE4F,SAAU,IAA1C,UACE,eAACT,EAAA,EAAD,CAAYC,GAAG,YAAYpF,GAAI,CAAEO,UAAjC,yBAEGwC,KAEH,cAAC8C,EAAA,EAAD,CACEC,QAAQ,YACRV,GAAG,kBACHtE,MAAOiC,EACPgD,MAAM,cACNC,WAAS,EACTnF,QAAQ,SACR4E,SAAU,SAACQ,GAAD,OAAOjD,EAAce,SAASkC,EAAEC,OAAOpF,MAAO,MACxDd,GAAI,CAAEO,UARR,SAUG,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAI9C,KAAI,SAAC0I,GAAD,OAC5B,cAACC,EAAA,EAAD,CAAoBtF,MAAOqF,EAA3B,SACGA,GADYA,aAQvB,cAACvI,EAAA,EAAD,CAAKoC,GAAI,CAAEU,MAAO,IAAlB,SACE,eAACiF,EAAA,EAAD,CAAaL,KAAK,QAAQtF,GAAI,CAAE4F,SAAU,IAA1C,UACE,cAACT,EAAA,EAAD,CAAYC,GAAG,aAAapF,GAAI,CAAEO,UAAlC,wBAGA,cAACsF,EAAA,EAAD,CACEC,QAAQ,aACRV,GAAG,mBACHtE,MAAOgC,EACPuD,aAAa,QACbN,MAAM,aACNC,WAAS,EACTnF,QAAQ,SACR4E,SAAU,SAACQ,GAAD,OAAO5D,EAAc4D,EAAEC,OAAOpF,QACxCd,GAAI,CAAEO,UATR,SAWGvC,EAAYP,KAAI,SAAC6I,GAAD,OACf,cAACF,EAAA,EAAD,CAAUtF,MAAOwF,EAAjB,SACGA,GADmCA,mBASlD,cAAC/B,EAAA,EAAD,CAAOG,QAAS,IAAhB,SACGrB,GAAgB5F,KAAI,SAAC8I,EAAM3C,GAAP,OACnB,eAACW,EAAA,EAAD,CACE7D,MAAM,cACNgE,QAAS,IACTF,UAAU,MACV1E,WAAW,SAEXE,GAAI,CACFwG,YAAa,EACbC,YAAa,QACbvB,YAAa,cACbwB,aAAc,GACd,UAAW,CACTxB,YAAa3E,GACboG,WAAY,UAblB,UAiBE,cAAC/I,EAAA,EAAD,CACEgJ,OAvIK,GAwILlG,MAAO,GACPd,QAAQ,OACRE,WAAW,SACXC,eAAe,SACfS,WAAW,OACXD,MAAOA,GAPT,SASGgG,EAAKM,QAAQ,IAAK,QAhLV/C,EAkLEf,EAlLS+D,MAAMC,KAAKD,MAAMhD,KAkLdrG,KAAI,SAACuJ,EAAGC,GAC/B,IAAM7B,EAAE,UAAMxB,GAAN,OAAiB9F,GAAjB,OAA6BmJ,GAC/BC,EAAUrE,EAAgBuC,GAChC,OACE,cAAC,IAAM+B,SAAP,UACE,cAACvJ,EAAA,EAAD,CACE8C,MAvJD,GAwJCkG,OAxJD,GAyJCF,aAAc,GACd1G,GAAI,CACFgF,gBAAiB,eACjB,UAAW,CACTA,gBAAiB,eACjBoC,QAAS,CAAC,GAAK,GAAK,MAGxBrC,QAAS,kBAnRLsC,EAmRwBjC,OAlRvCzC,EAAU2E,SAASD,IAOtBlF,EAAaQ,EAAUuB,QAAO,SAACqD,GAAD,OAAWA,IAAUF,MACnDjF,EAAmBoF,IAAK3E,EAAiB,CAACwE,OAP1ClF,EAAa,GAAD,mBAAKQ,GAAL,CAAgB0E,KAC5BjF,EAAmB,2BACdS,GADa,kBAEfwE,EAAOI,WAAa,OALN,IAACJ,GAwQN,SAaG1E,EAAU2E,SAASlC,IAAO8B,EACzB,cAAC,eAAD,CACEN,OArKL,GAsKKlG,MAtKL,GAsKYwG,EAAqC,GAAfA,EAAU,GACvCQ,KAAK,IACLC,WAAY,CAAC,GAAI,IACjBC,aAAc,SAACC,EAAD,IAxQZ,SAACnH,EAAO2G,GAC9B,MAAmBA,EAAO1D,MAAM7F,GAAhC,mBAAOgK,EAAP,KAAYC,EAAZ,KAGA,GAAIpF,EAAU2E,SAAV,UAAsBQ,GAAtB,OAA4BhK,GAA5B,OAAwCiG,SAASgE,EAAK,IAAM,IAC9DvE,SADF,CAKA,IAIMwE,EAJWnJ,KAAKoJ,MAAMvH,EAAQ,KAClBA,EAAQ,GAGkB,EAAI,EAAI,GAM9CwH,EAAenE,SAASgE,EAAK,IAAMC,EAAc,EAElC,CACnBrF,EAAU2E,SAASY,GACnBA,EAAenF,GAIFoF,KAAKC,SAElB5E,KAIFpB,EAAmB,2BACdS,GADa,kBAEfwE,EAASW,MAsOUK,CADiC,EAAX/C,KACD5E,MAAO0E,IANhC,SASE,cAACxH,EAAA,EAAD,CACE+B,QAASY,GACTqG,OAAO,OACPlG,MAAM,OACNgG,aAAc,OAGhB,QA/BR,cAA4BO,SAhClC,cAKcrD,IA3JF,IAACE,MAoJUX,OAoFjCZ,GAASxB,aAAe,CACtBpC,WAAY,SACZ8D,UAAW,WAGEF,UC5QA+F,GA1HG,SAAC,GAAqB,IAAnB5K,EAAkB,EAAlBA,YACnB,EAAwCkB,mBAAS,GAAjD,mBAAOF,EAAP,KAAqB6J,EAArB,KACM5J,EAAapB,EAAaG,GAQ1B8K,EAAS,SAACC,EAAKC,GAAN,MAAkB,CAAC7J,KAAKoJ,MAAMQ,EAAMC,GAAUD,EAAMC,IAO7DC,EAAmB,SAACC,GAExB,MAAwBJ,EAAOI,EAAU7K,GAAzC,mBAAO8K,EAAP,KAAeC,EAAf,KACA,EAAgCN,EAAOM,EAAO/K,GAA9C,mBAAOgL,EAAP,KAAmBC,EAAnB,KACA,EAAsCR,EACpCQ,EACAjL,GAFF,mBAAOkL,EAAP,KAAsBC,EAAtB,KAIA,EAAuBV,EAAOU,EAAcnL,GAE5C,MAAO,CACL,KAAM8K,EACN,KAAME,EACN,KAAME,EACN,KANF,sBAUIE,EAAY,SAACP,GAAD,OAAcQ,IAAeD,UAAUP,IAOnDS,EAAI,uCAAG,WAAOC,EAAOxG,EAAYG,GAA1B,qBAAA/B,EAAA,sDACXkI,IAAeG,IAAIzI,MAAQmC,EACrBuG,EAAQF,EAAM7L,KAAI,SAACgM,GACvB,MAA6BA,EAAK9F,MAAM7F,GAAxC,mBAAOgK,EAAP,KAAYC,EAAZ,KAAiBa,EAAjB,KACA,MAAO,CACLd,MACAc,SAAUD,EAAiBC,GAC3Bc,MAAOf,EAAiBZ,OAItB4B,EAAcvF,OAAOwF,QAAQC,IAAQL,GAAO,SAACM,GAAD,OAASA,EAAIhC,QAAMrK,KACnE,YAAuB,IAAD,mBAApBqK,EAAoB,KAAfiC,EAAe,KAOpB,MAAO,CACLxD,KAHoBtI,EAAiB6E,GAAYgF,GAIjDiC,gBAKFP,EAAM1F,OAAS,IACXkG,EAAOL,EAAY1I,QACvB,SAACC,EAAGC,GAAJ,mBAAC,eAAeD,GAAhB,kBAAoBC,EAAEoF,KAAKM,QAAQ,IAAK,KAAKY,WAAatG,EAAEoF,KAAO,WACnE,IAGI0D,EAAS,IAAIb,IAAa,CAC9BY,OACAE,QAAS,oDAAsDpH,EAAa,IAC5EqH,OAAO,WAAD,4BAAE,8BAAAjJ,EAAA,6DAKAkJ,EAAgB,YAAIZ,GAAO/L,KAC/B,SAACgM,GAAD,OA/CoBC,EA+CWD,EAAKC,MA/CTd,EA+CgBa,EAAKb,SA/CmC,KAA1CO,EAAUO,GAASP,EAAUP,IAAnD,IAACc,EAAOd,KAiDvByB,EAAqBD,EAAcE,MAAK,SAACpJ,EAAGC,GAAJ,OAAUA,EAAID,KAAG,GAE/DqH,EAAgB8B,GAEhBE,YAAW,WACThC,EAAgB,GAChB0B,EAAOO,YACNH,EAAqB,KACxBjB,IAAeqB,OAAOJ,EAAqB,KAhBrC,SAkBAjB,MAlBA,OAmBNO,EAAYe,SAAQ,YAA0B,IAAvBnE,EAAsB,EAAtBA,KAAsB,EAAhBwD,UACjBW,SAAQ,YAA0B,IAAvB9B,EAAsB,EAAtBA,SAAUc,EAAY,EAAZA,MAC7BO,EAAOU,qBACLpE,EAAKM,QAAQ,IAAK,KAClB+B,EACA,IAAMO,EAAUO,UAxBhB,2CAAF,kDAAC,KA6BNkB,iBAhEM,2CAAH,0DAoEV,OACE,eAAChN,EAAA,EAAD,WACE,cAAC,EAAD,CAAae,WAAYA,EAAYD,aAAcA,IACnD,cAAC,GAAD,CAAUC,WAAYA,EAAY8D,UAAW,SAAW/E,EAAaA,YAAaA,EAAa8E,OAAQ6G,QChH9FwB,GAVG,SAAC,GAAD,IAAGnN,EAAH,EAAGA,YAAH,OAChB,cAACE,EAAA,EAAD,CAAK+B,QAAQ,aAAaC,QAAQ,OAAOE,WAAW,SAASC,eAAe,SAAS6G,OAAO,QAA5F,SACE,cAAC,GAAD,CAAWlJ,YAAaA,OCQboN,GATA,kBACb,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,MACxB1N,EAAOG,KAAI,SAACC,GAAD,OACV,cAAC,IAAD,CAAOqN,KAAI,gBAAWrN,GAA4CsN,QAAS,cAAC,GAAD,CAAWtN,YAAaA,KAAnG,gBAAmDA,WCmB1CuN,OApBf,WACE,IAAMC,EAAQC,YAAY,CACxBC,QAAS,CACPC,QAAQ,eACH1O,MAKT,OACE,qBAAK2O,UAAU,MAAf,SACE,cAACC,EAAA,EAAD,CAAeL,MAAOA,EAAtB,SACE,cAAC,GAAD,UACE,cAAC,GAAD,WCXVM,IAASC,OACP,cAAC,IAAD,CAAeC,SAAS,aAAxB,SACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.cc06ad3b.chunk.js","sourcesContent":["export const Colors = {\n  main: '#646464',\n  secondary: '#fff',\n  bg: '#3E3C3C',\n  dark: '#525151',\n  light: '#706c6c',\n  red: '#ea9191',\n  yellow: '#E3EA91',\n  blue: '#91b9ea',\n  green: '#91eabb',\n  white: '#ccc',\n};\n\nexport const TRACKS = [1, 2, 3, 4, 5];\n\nexport const TRACK_COLORS = {\n  1: 'red',\n  2: 'yellow',\n  3: 'blue',\n  4: 'green',\n  5: 'white',\n};\n","import { Box } from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\nimport { TRACKS } from '../../const';\n\nconst Home = () => (\n  <div>\n    <h1>Home View</h1>\n    {TRACKS.map((trackNumber) => (\n      <Link to={`track-${trackNumber}`} key={`track-${trackNumber}-link`}>\n        <Box>\n          Go to track\n          {' '}\n          {trackNumber}\n        </Box>\n\n      </Link>\n    ))}\n  </div>\n);\n\nexport default Home;\n","const BASE_NOTES = [\n  'B',\n  'A#',\n  'A',\n  'G#',\n  'G',\n  'F#',\n  'F',\n  'E',\n  'D#',\n  'D',\n  'C#',\n  'C',\n];\nconst NOTES = ['C', ...BASE_NOTES, ...BASE_NOTES];\nconst DELIMITER = '__';\nconst GRID_ROWS = 2 * BASE_NOTES.length + 1;\nconst GRID_COLS = 48;\nconst NOTATIONS = ['1n', '2n', '4n', '8n'];\nconst NOTATION_VALUES = {\n  '1n': 8,\n  '2n': 4,\n  '4n': 2,\n  '8n': 1,\n};\nconst INSTRUMENTS = [\n  'bass-electric',\n  'cello',\n  /**\n   * Disabling as I have no idea how the notes are ordered for clarinet\n   */\n  // 'clarinet',\n  'flute',\n  'guitar-acoustic',\n  'guitar-electric',\n  /**\n   * Same problem as above\n   */\n  // 'harp',\n  'piano',\n  'saxophone',\n  'violin',\n];\n\nconst INSTRUMENT_NOTES = {\n  'bass-electric': [\n    'As5',\n    'G5',\n    'E5',\n    'Cs5',\n    'As4',\n    'G4',\n    'E4',\n    'Cs4',\n    'As3',\n    'G3',\n    'E3',\n    'Cs3',\n    'As2',\n    'G2',\n    'E2',\n    'Cs2',\n  ],\n  cello: [\n    'B4',\n    'As4',\n    'A4',\n    'Gs4',\n    'G4',\n    'Fs4',\n    'F4',\n    'E4',\n    'Ds4',\n    'D4',\n    'Cs4',\n    'C4',\n    'B3',\n    'As3',\n    'A3',\n    'Gs3',\n    'G3',\n    'Fs3',\n    'F3',\n    'E3',\n    'Ds3',\n    'D3',\n    'Cs3',\n    'C3',\n  ],\n  /**\n   * Skipping\n   */\n  clarinet: [\n    'F2',\n    'D3',\n    'F3',\n    'D4',\n    'D5',\n    'F4',\n    'Fs5',\n    'As2',\n    'As3',\n    'As4',\n    'D2',\n  ],\n  flute: [\n    'C6',\n    'A5',\n    'E5',\n    'C5',\n    'A4',\n    'E4',\n    'C4',\n    'A3',\n    'E3',\n    'C3',\n  ],\n  'guitar-acoustic': [\n    'B3',\n    'As3',\n    'A3',\n    'Gs3',\n    'G3',\n    'Fs3',\n    'F3',\n    'E3',\n    'Ds3',\n    'D3',\n    'Cs3',\n    'C3',\n    'B2',\n    'As2',\n    'A2',\n    'Gs2',\n    'G2',\n    'Fs2',\n    'F2',\n    'E2',\n    'Ds2',\n    'D2',\n    'Cs2',\n    'C2',\n  ],\n  'guitar-electric': [\n    'A5',\n    'Fs5',\n    'Ds5',\n    'C5',\n\n    'A4',\n    'Fs4',\n    'Ds4',\n    'C4',\n\n    'A3',\n    'Fs3',\n    'Ds3',\n    'C3',\n\n    // 'Fs2',\n    // 'A2',\n    // 'C6',\n    // 'Cs2',\n  ],\n  /**\n   * Disabling\n   */\n  harp: [\n    'B3',\n    'C5',\n    'D2',\n    'D4',\n    'D6',\n    'D7',\n    'E1',\n    'E3',\n    'E5',\n    'F2',\n    'F4',\n    'F6',\n    'F7',\n    'G1',\n    'G3',\n    'G5',\n    'A2',\n    'A4',\n    'A6',\n    'B1',\n    'B5',\n    'B6',\n    'C3',\n  ],\n  piano: [\n    'C5',\n\n    'B4',\n    'As4',\n    'A4',\n    'Gs4',\n    'G4',\n    'Fs4',\n    'F4',\n    'E4',\n    'Ds4',\n    'D4',\n    'Cs4',\n    'C4',\n\n    'B3',\n    'As3',\n    'A3',\n    'Gs3',\n    'G3',\n    'Fs3',\n    'F3',\n    'E3',\n    'Ds3',\n    'D3',\n    'Cs3',\n    'C3',\n  ],\n  saxophone: [\n    'B3',\n    'As3',\n    'A3',\n    'Gs3',\n    'G3',\n    'Fs3',\n    'F3',\n    'E3',\n    'Ds3',\n    'D3',\n    'Cs3',\n    'C3',\n\n    // 'B2',\n    // 'As2',\n\n    // 'E2',\n    // 'Ds4',\n    // 'E4',\n    // 'F2',\n    // 'F4',\n    // 'Fs2',\n    // 'Fs4',\n    // 'G2',\n    // 'G4',\n    // 'Gs2',\n    // 'Gs4',\n    // 'A4',\n    // 'C4',\n    // 'Cs2',\n    // 'Cs4',\n    // 'D2',\n    // 'D4',\n    // 'Ds2',\n  ],\n  violin: [\n    'C6',\n\n    'A5',\n    'G5',\n    'E5',\n    'C5',\n\n    'A4',\n    'G4',\n    'E4',\n    'C4',\n  ],\n};\n\nexport {\n  NOTES,\n  DELIMITER,\n  GRID_COLS,\n  GRID_ROWS,\n  NOTATIONS,\n  NOTATION_VALUES,\n  BASE_NOTES,\n  INSTRUMENTS,\n  INSTRUMENT_NOTES,\n};\n","import React, { useEffect, useState } from 'react';\nimport { Box, LinearProgress } from '@mui/material';\nimport PropTypes from 'prop-types';\n\n/**\n * Component that overlays the grid item when it's playing\n */\nconst GridOverlay = ({ playDuration, trackColor }) => {\n  const [progressKey, setProgressKey] = useState(Math.random());\n  const [progress, setProgress] = useState(0);\n  const isActive = playDuration !== 0;\n\n  /**\n   * Function to reset the current progress bar\n   */\n  const resetProgress = () => {\n    setProgress(0);\n    setProgressKey(Math.random());\n  };\n\n  /**\n   * Will be called everytime the variable `playDuration` changes.\n   * What it does: Sets an interval to update the \"playing audio\" progress bar.\n   */\n  useEffect(() => {\n    let timer;\n\n    if (playDuration > 0) {\n      timer = setInterval(() => {\n        setProgress((prev) => (prev === 100 ? prev : prev + 1));\n      }, playDuration / 100);\n    } else {\n      resetProgress();\n    }\n\n    /**\n     * Cleanup function to clear the interval.\n     */\n    return () => {\n      if (timer) {\n        resetProgress();\n        clearInterval(timer);\n      }\n    };\n  }, [playDuration]);\n\n  return isActive ? (\n    <Box\n      position=\"absolute\"\n      bgcolor=\"rgba(0, 0, 0, 0.1)\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      sx={{\n        backdropFilter: 'blur(1px)',\n        zIndex: 99,\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n      }}\n    >\n      <Box color=\"#fff\" fontWeight=\"bold\" fontSize=\"32px\">\n        PLAYING AUDIO\n      </Box>\n      <Box width=\"20vw\" color={`primary.${trackColor}`} sx={{ marginTop: 3 }}>\n        <LinearProgress\n          key={progressKey}\n          color=\"inherit\"\n          variant=\"determinate\"\n          value={progress}\n        />\n      </Box>\n    </Box>\n  ) : null;\n};\n\nGridOverlay.propTypes = {\n  trackColor: PropTypes.string,\n  playDuration: PropTypes.number.isRequired,\n};\n\nGridOverlay.defaultProps = {\n  trackColor: 'yellow',\n};\n\nexport default GridOverlay;\n","import React, {\n  createContext, useContext, useState, useCallback,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { TRACKS } from '../const';\n\nconst activeBoxesDefault = TRACKS.reduce((a, b) => ({ ...a, [b]: [] }), {});\nconst activeBoxesValuesDefault = TRACKS.reduce((a, b) => ({ ...a, [b]: {} }), {});\nconst instrumentsDefault = TRACKS.reduce((a, b) => ({ ...a, [b]: 'piano' }), {});\n\nconst TracksContext = createContext({\n  activeBoxes: activeBoxesDefault,\n  activeBoxesValues: activeBoxesValuesDefault,\n  instruments: instrumentsDefault,\n});\n\nexport const TracksProvider = ({ children }) => {\n  const [activeBoxes, setActiveBoxes] = useState(activeBoxesDefault);\n  const [activeBoxesValues, setActiveBoxesValues] = useState(activeBoxesValuesDefault);\n  const [instruments, setInstruments] = useState(instrumentsDefault);\n\n  const getSetter = useCallback((trackNumber) => {\n    if (TRACKS.indexOf(trackNumber) !== -1) {\n      const setActiveBox = (value) => {\n        setActiveBoxes((prev) => ({\n          ...prev,\n          [trackNumber]: value,\n        }));\n      };\n\n      const setActiveBoxValues = (value) => {\n        setActiveBoxesValues((prev) => ({\n          ...prev,\n          [trackNumber]: value,\n        }));\n      };\n\n      const setInstrument = (value) => {\n        setInstruments((prev) => ({\n          ...prev,\n          [trackNumber]: value,\n        }));\n      };\n\n      return {\n        setActiveBox, setActiveBoxValues, setInstrument,\n      };\n    }\n\n    return {\n      setActiveBox: () => {},\n      setActiveBoxValues: () => {},\n      setInstrument: () => {},\n    };\n  }, []);\n\n  return (\n    <TracksContext.Provider value={{\n      getSetter, activeBoxes, activeBoxesValues, instruments,\n    }}\n    >\n      {children}\n    </TracksContext.Provider>\n  );\n};\n\nTracksProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\n/**\n *\n */\nexport const useTracks = () => useContext(TracksContext);\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable react/no-array-index-key */\nimport React, {\n  useEffect, useRef, useState, useMemo,\n} from 'react';\nimport {\n  Stack,\n  Box,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n  IconButton,\n  Slider,\n} from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport { Link } from 'react-router-dom';\nimport omit from 'lodash.omit';\nimport { ResizableBox } from 'react-resizable';\nimport PropTypes from 'prop-types';\nimport { DELIMITER, INSTRUMENTS, INSTRUMENT_NOTES } from './const';\nimport { useTracks } from '../../../hooks/useTracks';\n\n/**\n * Grid item where user can clicks on the grid and assign an active note.\n * ![documentation](https://raw.githubusercontent.com/LouisAndrew/loop-maker/docs/docs/images/GridItem.jpeg)\n */\nconst GridItem = ({\n  trackColor = 'yellow',\n  onPlay,\n  trackName = 'Track 1',\n  trackNumber,\n}) => {\n  const {\n    getSetter, activeBoxes, activeBoxesValues, instruments,\n  } = useTracks();\n\n  const activeBox = useMemo(() => activeBoxes[trackNumber], [activeBoxes]);\n  const activeBoxValues = useMemo(\n    () => activeBoxesValues[trackNumber],\n    [activeBoxesValues],\n  );\n  const instrument = useMemo(() => instruments[trackNumber], [instruments]);\n\n  const { setActiveBox, setActiveBoxValues, setInstrument } = useMemo(\n    () => getSetter(trackNumber),\n    [trackNumber],\n  );\n\n  const [gridLength, setGridLength] = useState(40);\n  const [tempo, setTempo] = useState(120);\n\n  function handleTempo(_, newValue) {\n    setTempo(newValue);\n  }\n\n  /**\n   * Key of the whole component (Used to rerender the grids).\n   * @type {[string]}\n   */\n  const [key, setKey] = useState(Math.random());\n\n  /**\n   * @type {string[]}\n   */\n  const instrumentNotes = useMemo(\n    () => INSTRUMENT_NOTES[instrument],\n    [instrument],\n  );\n\n  /**\n   * Sets whether the component is done being rendered for the first time.\n   */\n  const firstRender = useRef(true);\n\n  /**\n   * Function to rerender the whole component.\n   */\n  const rerender = () => setKey(Math.random());\n\n  /**\n   * Function to toggle active state of a box (e.g. 1__2).\n   * @param {string} itemId\n   */\n  const toggleActive = (itemId) => {\n    if (!activeBox.includes(itemId)) {\n      setActiveBox([...activeBox, itemId]);\n      setActiveBoxValues({\n        ...activeBoxValues,\n        [itemId.toString()]: 1,\n      });\n    } else {\n      setActiveBox(activeBox.filter((boxId) => boxId !== itemId));\n      setActiveBoxValues(omit(activeBoxValues, [itemId]));\n    }\n  };\n\n  /**\n   * Function to handle resize action of a box. The function will be called **AFTER** the\n   * user stopped resizing the box.\n   * @param {number} width\n   * @param {string} itemId\n   */\n  const handleBoxResize = (width, itemId) => {\n    const [row, col] = itemId.split(DELIMITER);\n\n    // disable resize if the next column is filled\n    if (activeBox.includes(`${row}${DELIMITER}${parseInt(col, 10) + 1}`)) {\n      rerender();\n      return;\n    }\n\n    const quotient = Math.floor(width / 32); // Whole number division\n    const remainder = width % 32; // Rest of the division\n\n    // Resize value: Difference (in grids) of the active box before and after resize event\n    const resizeValue = quotient + (remainder > 0 ? 1 : 0);\n\n    /**\n     * Next position of the box\n     * @example {resizeValue: 3; itemId: 1__2} -> nextPosition = 1__5\n     */\n    const nextPosition = parseInt(col, 10) + resizeValue - 1;\n\n    const requirements = [\n      activeBox.includes(nextPosition),\n      nextPosition > gridLength,\n    ];\n\n    if (\n      requirements.some(Boolean) // returns true if all of the `requirements` array is truthy\n    ) {\n      rerender();\n      return;\n    }\n\n    setActiveBoxValues({\n      ...activeBoxValues,\n      [itemId]: resizeValue,\n    });\n  };\n\n  /**\n   * Play all of the active notes on the grid.\n   */\n  const handlePlay = () => {\n    onPlay(\n      activeBox.map((box) => `${box}${DELIMITER}${activeBoxValues[box] ?? 0}`),\n      instrument,\n      tempo,\n    );\n  };\n\n  /**\n   * Clear all of the active box and its values.\n   */\n  const handleClear = () => {\n    setActiveBox([]);\n    setActiveBoxValues([]);\n  };\n\n  /**\n   * Helper function to initialize an array of length\n   * @param {number} length\n   */\n  const createArray = (length) => Array.from(Array(length));\n\n  const filterOldBoxes = (box) => {\n    const [rowIndex, colIndex] = box.split(DELIMITER);\n    return (\n      instrumentNotes.length > parseInt(rowIndex, 10) && colIndex < gridLength\n    );\n  };\n\n  useEffect(() => {\n    if (!firstRender.current) {\n      rerender();\n    } else {\n      firstRender.current = false;\n    }\n  }, [activeBox, activeBoxValues]);\n\n  useEffect(() => {\n    if (!firstRender.current) {\n      const newValue = activeBox.filter(filterOldBoxes);\n\n      const newBoxValue = Object.keys(activeBoxValues).filter(filterOldBoxes);\n\n      setActiveBox(newValue);\n      setActiveBoxValues(\n        newBoxValue\n          .map((k) => ({ [k]: activeBoxValues[k] }))\n          .reduce((a, b) => ({ ...a, ...b }), {}),\n      );\n    }\n  }, [instrumentNotes, gridLength]);\n\n  const color = `primary.${trackColor}`;\n  const BOX_SIZE = 24;\n\n  return (\n    <Stack>\n      <Stack\n        direction=\"row\"\n        alignItems=\"flex-end\"\n        paddingBottom={2}\n        spacing={5}\n      >\n        <Stack\n          direction=\"row\"\n          alignItems=\"center\"\n          justifyContent=\"flex-start\"\n          spacing={3}\n        >\n          <Link to=\"/\">\n            <IconButton aria-label=\"back\" sx={{ color }}>\n              <ArrowBackIcon />\n            </IconButton>\n          </Link>\n          <Typography\n            color={color}\n            variant=\"h5\"\n            fontWeight=\"bold\"\n            sx={{ marginLeft: '14px' }}\n          >\n            {trackName}\n          </Typography>\n          <Button\n            onClick={handlePlay}\n            sx={{\n              backgroundColor: color,\n              marginLeft: '28px',\n              marginRight: '14px',\n              '&:hover': { backgroundColor: color },\n            }}\n          >\n            Play\n          </Button>\n          <Button\n            onClick={handleClear}\n            variant=\"outlined\"\n            sx={{ color, borderColor: color }}\n          >\n            Clear\n          </Button>\n        </Stack>\n        <Stack direction=\"row\" alignItems=\"flex-end\" spacing={1}>\n          <Box sx={{ width: 120 }}>\n            <InputLabel id=\"tempo\" sx={{ color }}>\n              Tempo:\n              {' '}\n              {tempo}\n            </InputLabel>\n            <Slider\n              size=\"small\"\n              value={tempo}\n              id=\"tempo\"\n              max={180}\n              min={80}\n              onChange={handleTempo}\n            />\n          </Box>\n          <Box sx={{ width: 80 }}>\n            <FormControl size=\"small\" sx={{ minWidth: 80 }}>\n              <InputLabel id=\"grid-size\" sx={{ color }}>\n                Grid length:\n                {gridLength}\n              </InputLabel>\n              <Select\n                labelId=\"grid-size\"\n                id=\"grid-size-input\"\n                value={gridLength}\n                label=\"Grid length\"\n                autoWidth\n                variant=\"filled\"\n                onChange={(e) => setGridLength(parseInt(e.target.value, 10))}\n                sx={{ color }}\n              >\n                {[32, 36, 40, 44, 48, 52].map((len) => (\n                  <MenuItem key={len} value={len}>\n                    {len}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Box>\n\n          <Box sx={{ width: 64 }}>\n            <FormControl size=\"small\" sx={{ minWidth: 80 }}>\n              <InputLabel id=\"instrument\" sx={{ color }}>\n                Instrument\n              </InputLabel>\n              <Select\n                labelId=\"instrument\"\n                id=\"instrument-input\"\n                value={instrument}\n                defaultValue=\"piano\"\n                label=\"Instrument\"\n                autoWidth\n                variant=\"filled\"\n                onChange={(e) => setInstrument(e.target.value)}\n                sx={{ color }}\n              >\n                {INSTRUMENTS.map((instrumentData) => (\n                  <MenuItem value={instrumentData} key={instrumentData}>\n                    {instrumentData}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Box>\n        </Stack>\n      </Stack>\n      <Stack spacing={0.25} key={key}>\n        {instrumentNotes.map((note, rowIndex) => (\n          <Stack\n            width=\"fit-content\"\n            spacing={0.25}\n            direction=\"row\"\n            alignItems=\"center\"\n            key={`row-${rowIndex}`}\n            sx={{\n              borderWidth: 1,\n              borderStyle: 'solid',\n              borderColor: 'transparent',\n              borderRadius: 0.5,\n              '&:hover': {\n                borderColor: color,\n                transition: '200ms',\n              },\n            }}\n          >\n            <Box\n              height={BOX_SIZE}\n              width={50}\n              display=\"flex\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              fontWeight=\"bold\"\n              color={color}\n            >\n              {note.replace('s', '#')}\n            </Box>\n            {createArray(gridLength).map((s, columnIndex) => {\n              const id = `${rowIndex}${DELIMITER}${columnIndex}`;\n              const idValue = activeBoxValues[id];\n              return (\n                <React.Fragment key={`col-${columnIndex}`}>\n                  <Box\n                    width={BOX_SIZE}\n                    height={BOX_SIZE}\n                    borderRadius={0.5}\n                    sx={{\n                      backgroundColor: 'primary.dark',\n                      '&:hover': {\n                        backgroundColor: 'primary.main',\n                        opacity: [0.9, 0.8, 0.7],\n                      },\n                    }}\n                    onClick={() => toggleActive(id)}\n                  >\n                    {activeBox.includes(id) && idValue ? (\n                      <ResizableBox\n                        height={BOX_SIZE}\n                        width={idValue * BOX_SIZE + (idValue - 1) * 2}\n                        axis=\"x\"\n                        handleSize={[10, 10]}\n                        onResizeStop={(event, { size }) => {\n                          handleBoxResize(size.width, id);\n                        }}\n                      >\n                        <Box\n                          bgcolor={color}\n                          height=\"100%\"\n                          width=\"100%\"\n                          borderRadius={0.5}\n                        />\n                      </ResizableBox>\n                    ) : null}\n                  </Box>\n                </React.Fragment>\n              );\n            })}\n          </Stack>\n        ))}\n      </Stack>\n    </Stack>\n  );\n};\n\nGridItem.propTypes = {\n  trackNumber: PropTypes.number.isRequired,\n  trackColor: PropTypes.string,\n  onPlay: PropTypes.func.isRequired,\n  trackName: PropTypes.string,\n};\n\nGridItem.defaultProps = {\n  trackColor: 'yellow',\n  trackName: 'Track 1',\n};\n\nexport default GridItem;\n","/* eslint-disable prefer-template */\nimport React, { useState } from 'react';\nimport { Box } from '@mui/material';\nimport * as Tone from 'tone';\nimport groupBy from 'lodash.groupby';\n\nimport PropTypes from 'prop-types';\nimport {\n  DELIMITER, INSTRUMENT_NOTES, NOTATION_VALUES,\n} from './Grid/const';\nimport GridOverlay from './Grid/GridOverlay';\nimport GridItem from './Grid/GridItem';\nimport { TRACK_COLORS } from '../../const';\n\nconst TrackGrid = ({ trackNumber }) => {\n  const [playDuration, setPlayDuration] = useState(0);\n  const trackColor = TRACK_COLORS[trackNumber];\n\n  /**\n   * Divide a number to its floored value (whole number division) and its rest.\n   * @param {number} num Number to be divided.\n   * @param {number} divider Divider of the number\n   * @returns {[number, number]} result of the division and the rest of the division\n   */\n  const divide = (num, divider) => [Math.floor(num / divider), num % divider];\n\n  /**\n   * Function to create a Tone.js compliant time object from a duration.\n   * @param {number} duration Duration of the time in grid units.\n   * @returns {Object} Tone.js compliant time object.\n   */\n  const createTimeObject = (duration) => {\n    // note: Assuming that every grid unit -> 8n or 1/8 note\n    const [nValue, nRest] = divide(duration, NOTATION_VALUES['1n']);\n    const [halfNValue, halfNRest] = divide(nRest, NOTATION_VALUES['2n']);\n    const [quarterNValue, quarterNRest] = divide(\n      halfNRest,\n      NOTATION_VALUES['4n'],\n    );\n    const [eighthNValue] = divide(quarterNRest, NOTATION_VALUES['8n']);\n\n    return {\n      '1n': nValue,\n      '2n': halfNValue,\n      '4n': quarterNValue,\n      '8n': eighthNValue,\n    };\n  };\n\n  const toSeconds = (duration) => Tone.Transport.toSeconds(duration);\n  const getTotalNoteDuration = (start, duration) => (toSeconds(start) + toSeconds(duration)) * 1000;\n\n  /**\n   * Function to play a grid item.\n   * @param {string[]} items\n   */\n  const play = async (items, instrument, tempo) => {\n    Tone.Transport.bpm.value = tempo;\n    const times = items.map((item) => {\n      const [row, col, duration] = item.split(DELIMITER);\n      return {\n        row,\n        duration: createTimeObject(duration),\n        start: createTimeObject(col),\n      };\n    });\n\n    const noteEntries = Object.entries(groupBy(times, (obj) => obj.row)).map(\n      ([row, noteDatas]) => {\n        /**\n         *\n         * @returns {string}\n         */\n        const getNote = () => INSTRUMENT_NOTES[instrument][row];\n\n        return {\n          note: getNote(),\n          noteDatas,\n        };\n      },\n    );\n\n    if (times.length > 0) {\n      const urls = noteEntries.reduce(\n        (a, b) => ({ ...a, [b.note.replace('s', '#').toString()]: b.note + '.mp3' }),\n        {},\n      );\n\n      const player = new Tone.Sampler({\n        urls,\n        baseUrl: 'https://louisandrew.github.io/loop-maker/samples/' + instrument + '/',\n        onload: async () => {\n          /**\n           * Gets the total duration of a track.\n           * Retrieve the last note of the current track, then sum its start time and its duration.\n           */\n          const noteDurations = [...times].map(\n            (item) => getTotalNoteDuration(item.start, item.duration),\n          );\n          const totalTrackDuration = noteDurations.sort((a, b) => b - a)[0];\n\n          setPlayDuration(totalTrackDuration);\n\n          setTimeout(() => {\n            setPlayDuration(0);\n            player.dispose();\n          }, totalTrackDuration + 500);\n          Tone.Transport.cancel(totalTrackDuration / 1000);\n\n          await Tone.start();\n          noteEntries.forEach(({ note, noteDatas }) => {\n            noteDatas.forEach(({ duration, start }) => {\n              player.triggerAttackRelease(\n                note.replace('s', '#'),\n                duration,\n                '+' + toSeconds(start),\n              );\n            });\n          });\n        },\n      }).toDestination();\n    }\n  };\n\n  return (\n    <Box>\n      <GridOverlay trackColor={trackColor} playDuration={playDuration} />\n      <GridItem trackColor={trackColor} trackName={'Track ' + trackNumber} trackNumber={trackNumber} onPlay={play} />\n    </Box>\n  );\n};\n\nTrackGrid.propTypes = {\n  trackNumber: PropTypes.number.isRequired,\n};\n\nexport default TrackGrid;\n","import React from 'react';\nimport { Box } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport TrackGrid from '../TrackItem/TrackGrid';\n\nconst TrackView = ({ trackNumber }) => (\n  <Box bgcolor=\"primary.bg\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height=\"100vh\">\n    <TrackGrid trackNumber={trackNumber} />\n  </Box>\n);\n\nTrackView.propTypes = {\n  trackNumber: PropTypes.number.isRequired,\n};\n\nexport default TrackView;\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { TRACKS } from '../../const';\nimport Home from './Home';\nimport TrackView from './TrackView';\n\nconst Router = () => (\n  <Routes>\n    <Route path=\"/\" element={<Home />} />\n    {TRACKS.map((trackNumber) => (\n      <Route path={`track-${trackNumber}`} key={`track-${trackNumber}`} element={<TrackView trackNumber={trackNumber} />} />\n    ))}\n  </Routes>\n);\n\nexport default Router;\n","import React from 'react';\nimport { createTheme, ThemeProvider } from '@mui/material';\n\nimport { Colors } from './const';\n\nimport './App.css';\nimport Router from './components/Views/Router';\nimport { TracksProvider } from './hooks/useTracks';\n\nfunction App() {\n  const theme = createTheme({\n    palette: {\n      primary: {\n        ...Colors,\n      },\n    },\n  });\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <TracksProvider>\n          <Router />\n        </TracksProvider>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// eslint-disable-file\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\nimport 'react-resizable/css/styles.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter basename=\"loop-maker\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}