{"version":3,"sources":["components/TrackItem/Grid/GridBackround.jsx","components/TrackItem/TrackGrid.jsx","const.js","App.jsx","index.jsx"],"names":["GridBackround","trackColor","DELIMITER","useState","activeBox","setActiveBox","activeBoxValues","setActiveBoxValues","Math","random","key","setKey","firstRender","useRef","rerender","createArray","length","Array","from","useEffect","current","Stack","spacing","map","_","rowIndex","direction","s","columnIndex","id","idValue","Box","sx","width","height","backgroundColor","borderRadius","opacity","onClick","itemId","includes","prev","filter","boxId","omit","toString","axis","handleSize","draggableOpts","grid","onResizeStop","event","split","row","col","parseInt","resizeValue","floor","nextPosition","some","Boolean","handleBoxResize","size","bgcolor","defaultProps","TrackGrid","Colors","main","bg","dark","yellow","App","theme","createTheme","palette","primary","className","ThemeProvider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7ace8c1e.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Stack, Box } from '@mui/material';\nimport omit from 'lodash.omit';\nimport { ResizableBox } from 'react-resizable';\nimport PropTypes from 'prop-types';\n\nconst GridBackround = ({ trackColor = 'yellow' }) => {\n  const DELIMITER = '__';\n  const GRID_ROWS = 8;\n  const GRID_COLS = 16;\n\n  /**\n   * Array of active box positions.\n   * @example [1__2, 2__3]\n   * @type {[String[], | React.SetStateAction]}\n   */\n  const [activeBox, setActiveBox] = useState([]);\n\n  /**\n   * Array of the values (length in number of grids taken) of the active box.\n   * @example { '1__2': 1, '2__3': 2 }\n   * @type {[{[key: string]: number}, React.SetStateAction]}\n   */\n  const [activeBoxValues, setActiveBoxValues] = useState({});\n\n  const [key, setKey] = useState(Math.random());\n  const firstRender = useRef(true);\n\n  /**\n   * Function to rerender the whole component.\n   */\n  const rerender = () => setKey(Math.random());\n\n  /**\n   * Function to toggle active state of a box (e.g. 1__2).\n   * @param {string} itemId\n   */\n  const toggleActive = (itemId) => {\n    if (!activeBox.includes(itemId)) {\n      setActiveBox([...activeBox, itemId]);\n      setActiveBoxValues({\n        ...activeBoxValues,\n        [itemId.toString()]: 1,\n      });\n    } else {\n      setActiveBox((prev) => prev.filter((boxId) => boxId !== itemId));\n      setActiveBoxValues((prev) => omit(prev, [itemId]));\n    }\n  };\n\n  /**\n   * Function to handle resize action of a box. The function will be called **AFTER** the\n   * user stopped resizing the box.\n   * @param {number} width\n   * @param {string} itemId\n   */\n  const handleBoxResize = (width, itemId) => {\n    const [row, col] = itemId.split(DELIMITER);\n\n    // disable resize if the next column is filled\n    if (activeBox.includes(`${row}${DELIMITER}${parseInt(col, 10) + 1}`)) {\n      rerender();\n      return;\n    }\n\n    const quotient = Math.floor(width / 32); // Whole number division\n    const remainder = width % 32; // Rest of the division\n\n    // Resize value: Difference (in grids) of the active box before and after resize event\n    const resizeValue = quotient + (remainder > 0 ? 1 : 0);\n\n    /**\n      * Next position of the box\n      * @example {resizeValue: 3; itemId: 1__2} -> nextPosition = 1__5\n      */\n    const nextPosition = parseInt(col, 10) + resizeValue - 1;\n\n    const requirements = [activeBox.includes(nextPosition), nextPosition >= GRID_COLS];\n\n    if (\n      requirements.some(Boolean) // returns true if all of the `requirements` array is truthy\n    ) {\n      rerender();\n      return;\n    }\n\n    setActiveBoxValues((prev) => ({\n      ...prev,\n      [itemId]: resizeValue,\n    }));\n  };\n\n  /**\n   * Helper function to initialize an array of length\n   * @param {number} length\n   */\n  const createArray = (length) => Array.from(Array(length));\n\n  useEffect(() => {\n    if (!firstRender.current) {\n      rerender();\n    } else {\n      firstRender.current = false;\n    }\n  }, [activeBox, activeBoxValues]);\n\n  return (\n    <Stack spacing={0.25} key={key}>\n      {createArray(GRID_ROWS).map((_, rowIndex) => (\n        <Stack direction=\"row\" spacing={0.25} key={`row-${rowIndex}`}>\n          {createArray(GRID_COLS).map((s, columnIndex) => {\n            const id = `${rowIndex}${DELIMITER}${columnIndex}`;\n            const idValue = activeBoxValues[id];\n            return (\n              <Box\n                sx={{\n                  width: 30,\n                  height: 30,\n                  backgroundColor: 'primary.dark',\n                  borderRadius: 0.5,\n                  '&:hover': {\n                    backgroundColor: 'primary.main',\n                    opacity: [0.9, 0.8, 0.7],\n                  },\n                }}\n                key={`col-${columnIndex}`}\n                onClick={() => toggleActive(id)}\n              >\n                {activeBox.includes(id) && idValue ? (\n                  <ResizableBox\n                    height={30}\n                    width={idValue * 30 + (idValue - 1) * 2}\n                    axis=\"x\"\n                    handleSize={[10, 10]}\n                    draggableOpts={{ grid: [32] }}\n                    onResizeStop={(event, { size }) => {\n                      handleBoxResize(size.width, id);\n                    }}\n                  >\n                    <Box\n                      bgcolor={`primary.${trackColor}`}\n                      height=\"100%\"\n                      width=\"100%\"\n                      borderRadius={0.5}\n                    />\n                  </ResizableBox>\n                ) : null}\n              </Box>\n            );\n          })}\n        </Stack>\n      ))}\n    </Stack>\n  );\n};\n\nGridBackround.propTypes = {\n  trackColor: PropTypes.string,\n};\n\nGridBackround.defaultProps = {\n  trackColor: 'yellow',\n};\n\nexport default GridBackround;\n","import React from 'react';\nimport GridBackround from './Grid/GridBackround';\n\nconst TrackGrid = () => (\n  <GridBackround trackColor=\"yellow\" />\n);\n\nexport default TrackGrid;\n","export const Colors = {\n  main: '#646464',\n  bg: '#3E3C3C',\n  dark: '#525151',\n  yellow: '#E3EA91',\n};\n","import React from 'react';\nimport { createTheme, ThemeProvider, Box } from '@mui/material';\n\nimport TrackGrid from './components/TrackItem/TrackGrid';\nimport { Colors } from './const';\n\nimport './App.css';\n\nfunction App() {\n  const theme = createTheme({\n    palette: {\n      primary: {\n        ...Colors,\n      },\n    },\n  });\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <Box bgcolor=\"primary.bg\">\n          <TrackGrid />\n        </Box>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// eslint-disable-file\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'react-resizable/css/styles.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}